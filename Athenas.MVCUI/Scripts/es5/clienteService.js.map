{"version":3,"sources":["../es6/cliente/clienteService.js"],"names":["ClienteService","crearCliente","cliente","AthenasNet","llamadaApi","type","data","JSON","stringify","url","respuesta","actualizarCliente","listarCliente","filtros","filtrosDefecto","Nombre","Data","eliminarCliente","id","Id","buscarCliente"],"mappings":";;;;;;;;;;;;AACA,IAAMA,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAEzB,MAAMC,YAAY;AAAA,uEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACOC,UAAU,CAACC,UAAX,CAAsB;AAC1CC,gBAAAA,IAAI,EAAE,MADoC;AAE1CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAFoC;AAG1CO,gBAAAA,GAAG,EAAE;AAHqC,eAAtB,CADP;;AAAA;AACXC,cAAAA,SADW;AAAA,+CAOVA,SAPU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZT,YAAY;AAAA;AAAA;AAAA,KAAlB;;AAUA,MAAMU,iBAAiB;AAAA,wEAAG,kBAAOT,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEEC,UAAU,CAACC,UAAX,CAAsB;AAC1CC,gBAAAA,IAAI,EAAE,MADoC;AAE1CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,OAAf,CAFoC;AAG1CO,gBAAAA,GAAG,EAAE;AAHqC,eAAtB,CAFF;;AAAA;AAEhBC,cAAAA,SAFgB;AAAA,gDAQfA,SARe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBC,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AAWA,MAAMC,aAAa;AAAA,wEAAG,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEZC,cAAAA,cAFY;AAGdC,gBAAAA,MAAM,EAAE;AAHM,iBAIXF,OAJW;AAAA;AAAA,qBAOMV,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAEQ,cADoC;AAE1CL,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CAPN;;AAAA;AAOZC,cAAAA,SAPY;AAAA,gDAYXA,SAAS,CAACM,IAZC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbJ,aAAa;AAAA;AAAA;AAAA,KAAnB;;AAeA,MAAMK,eAAe;AAAA,wEAAG,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEIf,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAE;AAAEa,kBAAAA,EAAE,EAAED;AAAN,iBADoC;AAE1CT,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CAFJ;;AAAA;AAEdC,cAAAA,SAFc;AAAA,gDAMbA,SANa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfO,eAAe;AAAA;AAAA;AAAA,KAArB;;AASA,MAAMG,aAAa;AAAA,wEAAG,kBAAOF,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACMf,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAE;AAAEa,kBAAAA,EAAE,EAAED;AAAN,iBADoC;AAE1CT,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CADN;;AAAA;AACZC,cAAAA,SADY;AAAA,gDAKXA,SALW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAbU,aAAa;AAAA;AAAA;AAAA,KAAnB;;AASA,SAAO;AACHnB,IAAAA,YAAY,EAAZA,YADG;AAEHU,IAAAA,iBAAiB,EAAjBA,iBAFG;AAGHC,IAAAA,aAAa,EAAbA,aAHG;AAIHK,IAAAA,eAAe,EAAfA,eAJG;AAKHG,IAAAA,aAAa,EAAbA;AALG,GAAP;AAOH,CA/DD","sourcesContent":["ï»¿\r\nconst ClienteService = () => {\r\n\r\n    const crearCliente = async (cliente) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(cliente),\r\n            url: 'Cliente/Crear'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const actualizarCliente = async (cliente) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(cliente),\r\n            url: 'Cliente/Actualizar'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const listarCliente = async (filtros) => {\r\n\r\n        const filtrosDefecto = {\r\n            Nombre: '',\r\n            ...filtros\r\n        }\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: filtrosDefecto,\r\n            url: 'Cliente/Listar'\r\n        })\r\n\r\n        return respuesta.Data;\r\n    }\r\n\r\n    const eliminarCliente = async (id) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Cliente/Eliminar'\r\n        })\r\n        return respuesta\r\n    }\r\n\r\n    const buscarCliente = async (id) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Cliente/Obtener'\r\n        })\r\n        return respuesta;\r\n\r\n    }\r\n\r\n    return {\r\n        crearCliente,\r\n        actualizarCliente,\r\n        listarCliente,\r\n        eliminarCliente,\r\n        buscarCliente\r\n    }\r\n}"],"file":"clienteService.js"}