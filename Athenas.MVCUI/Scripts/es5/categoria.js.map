{"version":3,"sources":["../es6/categoria.js"],"names":["categorias","crearCategoria","categoria","AthenasNet","llamadaApi","type","data","JSON","stringify","url","respuesta","console","log","error","actualizarCategoria","generarTempCategoria","template","Id","Descripcion","generarTabla","lstCategorias","tBody","document","querySelector","tableBody","forEach","cat","innerHTML","listarCategoria","filtros","filtrosDefecto","Data","buscarCategoria","id","$","modal","eliminarCategoria","window","addEventListener","tablaCategoria","btnNuevo","formCategoria","getElementById","formConfirmar","formElementos","elements","value","on","e","evt","target","dataset","accion","cateSeleccionada","find","c","parseInt","preventDefault"],"mappings":"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","sourcesContent":["let categorias = [];\r\n\r\nconst crearCategoria = async (categoria) => {\r\n    try {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Crear'\r\n        })\r\n        //activar el toast\r\n        console.log(respuesta);\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nconst actualizarCategoria = async (categoria) => {\r\n    try {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Actualizar'\r\n        })\r\n        //activar el toast\r\n        console.log(respuesta);\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nconst generarTempCategoria = (categoria) => {\r\n    let template = `\r\n    <tr>\r\n        <td>${categoria.Id}</td>\r\n        <td>${categoria.Descripcion}</td>\r\n        <td>\r\n            <button type=\"button\" class=\"btn btn-success btn-sm btn-sin-click\" data-id=\"${categoria.Id}\" data-accion=\"editar\">\r\n                <i class=\"fas fa-edit\"></i>\r\n            </button>\r\n            <button type=\"button\" class=\"btn btn-success btn-sm btn-sin-click\" data-id=\"${categoria.Id}\" data-accion=\"eliminar\">\r\n                <i class=\"fas fa-trash-alt\" data-del-action=\"true\"></i>\r\n            </button>\r\n        </td>\r\n    </tr>\r\n`;\r\n\r\n    return template;\r\n}\r\n\r\n\r\nconst generarTabla = (lstCategorias) => {\r\n    const tBody = document.querySelector('#tb-categoria tbody');\r\n\r\n    let tableBody = \"\";\r\n\r\n    lstCategorias.forEach((cat) => {\r\n        tableBody += generarTempCategoria(cat);\r\n    });\r\n\r\n    tBody.innerHTML = tableBody;\r\n}\r\n\r\nconst listarCategoria = async (filtros) => {\r\n    try {\r\n\r\n        const filtrosDefecto = {\r\n            Descripcion: '',\r\n            ...filtros\r\n        }\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: filtrosDefecto,\r\n            url: 'Categoria/Listar'\r\n        })\r\n        //activar el toast\r\n        console.log(respuesta);\r\n        categorias = respuesta.Data;\r\n        generarTabla(categorias);\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nconst buscarCategoria = async (id) => {\r\n    try {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Obtener'\r\n        })\r\n        //activar el toast\r\n        console.log(respuesta);\r\n        $('#modal-categoria').modal('hide');\r\n        //Limpiar campos\r\n    }\r\n    catch (err) {\r\n        //mensaje de error en el toast\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nconst eliminarCategoria = async (id) => {\r\n    try {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Eliminar'\r\n        })\r\n        //activar el toast\r\n        console.log(respuesta);\r\n    }\r\n    catch (err) {\r\n        console.error(err);\r\n    }\r\n}\r\n\r\n\r\n\r\nwindow.addEventListener('load', () => {\r\n\r\n    listarCategoria({});\r\n\r\n    const tablaCategoria = document.querySelector('#tb-categoria');\r\n    const btnNuevo = document.querySelector('#btn-nuevo');\r\n    const formCategoria = document.getElementById('form-categoria');\r\n    const formConfirmar = document.getElementById('form-confirmar');\r\n    const formElementos = formCategoria.elements;\r\n\r\n    btnNuevo.addEventListener('click', () => { formElementos['accion'].value = 'registrar'; });\r\n\r\n    $('#modal-categoria').on('show.bs.modal', (e) => {\r\n        if (formElementos['accion'].value === 'registrar') {\r\n            formElementos['descripcion'].value = '';\r\n            formElementos['hdn-id'].value = 0;\r\n        }\r\n    } )\r\n\r\n    tablaCategoria.addEventListener('click', (evt) => {\r\n\r\n        if (evt.target.dataset.id) {\r\n            const { id, accion } = evt.target.dataset;\r\n            if (accion === 'editar') {\r\n                console.log(formElementos)\r\n\r\n                const cateSeleccionada = categorias.find(c => c.Id === parseInt(id));\r\n\r\n                formElementos['descripcion'].value = cateSeleccionada.Descripcion;\r\n                formElementos['hdn-id'].value = cateSeleccionada.Id;\r\n                formElementos['accion'].value = 'editar';\r\n                $('#modal-categoria').modal('show');\r\n            }\r\n            else if (accion === 'eliminar') {\r\n                console.log('eliminar')\r\n                $('#modal-confirmar').modal('show');\r\n            }\r\n        }\r\n\r\n        \r\n    });\r\n\r\n    formCategoria.addEventListener('submit', async (evt) => {\r\n        evt.preventDefault();\r\n\r\n        const accion = formElementos['accion'].value;\r\n\r\n        const categoria = {\r\n            Descripcion: formElementos['txt-descripcion'].value,\r\n            Id: parseInt(formElementos['hdn-id'].value),\r\n        };\r\n\r\n        if (accion === 'registrar') {\r\n            await crearCategoria(categoria);\r\n        }\r\n        else if (accion === 'editar') {\r\n            await actualizarCategoria(categoria);\r\n            \r\n        }\r\n       \r\n        $('#modal-categoria').modal('hide');\r\n        await listarCategoria({});\r\n    })\r\n\r\n\r\n})"],"file":"categoria.js"}