{"version":3,"sources":["../es6/categoria.js"],"names":["CategoriaService","crearCategoria","categoria","AthenasNet","llamadaApi","type","data","JSON","stringify","url","respuesta","actualizarCategoria","listarCategoria","filtros","filtrosDefecto","Descripcion","Data","eliminarCategoria","id","Id","buscarCategoria","CategoriaUI","getFiltros","arrFiltros","Mant","generarTabla","lstCategorias","filas","edita","elimina","compilaTemplate","ID_TEMP_TBL_BODY","SEL_TBL_BODY","$","SEL_TBL_MANT","DataTable","getCategoria","getEntidad","CategoriaController","service","ui","cateSeleccionada","muestraCategorias","map","c","console","error","manejaEvtTabla","getTblMantenedor","addEventListener","evt","target","dataset","accion","find","parseInt","setFormMantenedor","log","mostrarConfirmacion","manejaEnvioCat","getFormMantenedor","preventDefault","cerrarModMant","muestraToast","mensaje","titulo","cssClass","manejaEnvioConf","getFormConfirmar","ocultarConfirmacion","manejaEnvioFiltro","getFormFiltrar","iniciar","evtMostrarModMant","window","controller"],"mappings":";;;;;;;;;;;;AACA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAE3B,MAAMC,cAAc;AAAA,uEAAG,iBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKC,UAAU,CAACC,UAAX,CAAsB;AAC1CC,gBAAAA,IAAI,EAAE,MADoC;AAE1CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,SAAf,CAFoC;AAG1CO,gBAAAA,GAAG,EAAE;AAHqC,eAAtB,CADL;;AAAA;AACbC,cAAAA,SADa;AAAA,+CAOZA,SAPY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdT,cAAc;AAAA;AAAA;AAAA,KAApB;;AAUA,MAAMU,mBAAmB;AAAA,wEAAG,kBAAOT,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEAC,UAAU,CAACC,UAAX,CAAsB;AAC1CC,gBAAAA,IAAI,EAAE,MADoC;AAE1CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,SAAf,CAFoC;AAG1CO,gBAAAA,GAAG,EAAE;AAHqC,eAAtB,CAFA;;AAAA;AAElBC,cAAAA,SAFkB;AAAA,gDAQjBA,SARiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBC,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAWA,MAAMC,eAAe;AAAA,wEAAG,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdC,cAAAA,cAFc;AAGhBC,gBAAAA,WAAW,EAAE;AAHG,iBAIbF,OAJa;AAAA;AAAA,qBAOIV,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAEQ,cADoC;AAE1CL,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CAPJ;;AAAA;AAOdC,cAAAA,SAPc;AAAA,gDAYbA,SAAS,CAACM,IAZG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfJ,eAAe;AAAA;AAAA;AAAA,KAArB;;AAeA,MAAMK,iBAAiB;AAAA,wEAAG,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEEf,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAE;AAAEa,kBAAAA,EAAE,EAAED;AAAN,iBADoC;AAE1CT,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CAFF;;AAAA;AAEhBC,cAAAA,SAFgB;AAAA,gDAMfA,SANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBO,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AASA,MAAMG,eAAe;AAAA,wEAAG,kBAAOF,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACIf,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAE;AAAEa,kBAAAA,EAAE,EAAED;AAAN,iBADoC;AAE1CT,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CADJ;;AAAA;AACdC,cAAAA,SADc;AAAA,gDAKbA,SALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfU,eAAe;AAAA;AAAA;AAAA,KAArB;;AASA,SAAO;AACHnB,IAAAA,cAAc,EAAdA,cADG;AAEHU,IAAAA,mBAAmB,EAAnBA,mBAFG;AAGHC,IAAAA,eAAe,EAAfA,eAHG;AAIHK,IAAAA,iBAAiB,EAAjBA,iBAJG;AAKHG,IAAAA,eAAe,EAAfA;AALG,GAAP;AAOH,CA/DD;;AAiEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAEtB,MAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,QAAMC,UAAU,GAAG,CAAC,aAAD,CAAnB;AAEA,WAAOpB,UAAU,CAACqB,IAAX,CAAgBF,UAAhB,CAA2BC,UAA3B,CAAP;AAEH,GALD;;AAOA,MAAME,YAAY,GAAG,SAAfA,YAAe,CAACC,aAAD,EAAmB;AAEpC,QAAMpB,IAAI,GAAG;AACTqB,MAAAA,KAAK,EAAED,aADE;AAETE,MAAAA,KAAK,EAAE,IAFE;AAGTC,MAAAA,OAAO,EAAE;AAHA,KAAb;AAMA1B,IAAAA,UAAU,CAAC2B,eAAX,CAA2B3B,UAAU,CAAC4B,gBAAtC,EAAwDzB,IAAxD,EAA8DH,UAAU,CAACqB,IAAX,CAAgBQ,YAA9E;AACAC,IAAAA,CAAC,CAAC9B,UAAU,CAACqB,IAAX,CAAgBU,YAAjB,CAAD,CAAgCC,SAAhC;AACH,GAVD;;AAYA,MAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,WAAOjC,UAAU,CAACqB,IAAX,CAAgBa,UAAhB,CAA2B,CAAC,aAAD,EAAgB,IAAhB,EAAsB,QAAtB,CAA3B,CAAP;AACH,GAFD;;AAIA,SAAO;AACHD,IAAAA,YAAY,EAAZA,YADG;AAEHX,IAAAA,YAAY,EAAZA,YAFG;AAGHH,IAAAA,UAAU,EAAVA;AAHG,GAAP;AAKH,CA9BD;;AAgCA,IAAMgB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,OAAD,EAAUC,EAAV,EAAiB;AACzC,MAAId,aAAa,GAAG,EAApB;AACA,MAAIe,gBAAgB,GAAG,EAAvB;AAFyC,oBAGxBtC,UAHwB;AAAA,MAGjCqB,IAHiC,eAGjCA,IAHiC;;AAKzC,MAAMkB,iBAAiB;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAO7B,cAAAA,OAAP,8DAAiB,EAAjB;AAAA;AAAA;AAAA,qBAEI0B,OAAO,CAAC3B,eAAR,CAAwBC,OAAxB,CAFJ;;AAAA;AAElBa,cAAAA,aAFkB;AAGlBc,cAAAA,EAAE,CAACf,YAAH,CAAgBC,aAAa,CAACiB,GAAd,CAAkB,UAAAC,CAAC;AAAA,uBAAK;AACpCzB,kBAAAA,EAAE,EAAEyB,CAAC,CAACzB,EAD8B;AAEpCJ,kBAAAA,WAAW,EAAE6B,CAAC,CAAC7B;AAFqB,iBAAL;AAAA,eAAnB,CAAhB;AAHkB;AAAA;;AAAA;AAAA;AAAA;AASlB8B,cAAAA,OAAO,CAACC,KAAR;;AATkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBJ,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AAaA,MAAMK,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzBvB,IAAAA,IAAI,CAACwB,gBAAL,GAAwBC,gBAAxB,CAAyC,OAAzC,EAAkD,UAACC,GAAD,EAAS;AAEvD,UAAIA,GAAG,CAACC,MAAJ,CAAWC,OAAX,CAAmBlC,EAAvB,EAA2B;AAAA,kCACAgC,GAAG,CAACC,MAAJ,CAAWC,OADX;AAAA,YACflC,EADe,uBACfA,EADe;AAAA,YACXmC,MADW,uBACXA,MADW;AAGvBZ,QAAAA,gBAAgB,GAAGf,aAAa,CAAC4B,IAAd,CAAmB,UAAAV,CAAC;AAAA,iBAAIA,CAAC,CAACzB,EAAF,KAASoC,QAAQ,CAACrC,EAAD,CAArB;AAAA,SAApB,CAAnB;AACAuB,QAAAA,gBAAgB,CAACY,MAAjB,GAA0BA,MAA1B;;AAEA,YAAIA,MAAM,KAAK,QAAf,EAAyB;AACrB7B,UAAAA,IAAI,CAACgC,iBAAL,CAAuBf,gBAAvB;AACH,SAFD,MAGK,IAAIY,MAAM,KAAK,UAAf,EAA2B;AAC5BR,UAAAA,OAAO,CAACY,GAAR,CAAY,UAAZ;AACAtD,UAAAA,UAAU,CAACuD,mBAAX;AACH;AACJ;AAGJ,KAlBD;AAmBH,GApBD;;AAsBA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAEzBnC,IAAAA,IAAI,CAACoC,iBAAL,GAAyBX,gBAAzB,CAA0C,QAA1C;AAAA,0EAAoD,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAChDA,gBAAAA,GAAG,CAACW,cAAJ;AAEM3D,gBAAAA,SAH0C,GAG9BsC,EAAE,CAACJ,YAAH,EAH8B;AAAA;;AAAA,sBAKxClC,SAAS,CAACmD,MAAV,KAAqB,WALmB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAMlCd,OAAO,CAACtC,cAAR,CAAuBC,SAAvB,CANkC;;AAAA;AAOxCsB,gBAAAA,IAAI,CAACsC,aAAL;AACA3D,gBAAAA,UAAU,CAAC4D,YAAX,CAAwB;AAACC,kBAAAA,OAAO,EAAE,6CAAV;AAAwDC,kBAAAA,MAAM,EAAE;AAAhE,iBAAxB;AARwC;AAAA;;AAAA;AAAA,sBAUnC/D,SAAS,CAACmD,MAAV,KAAqB,QAVc;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAWlCd,OAAO,CAAC5B,mBAAR,CAA4BT,SAA5B,CAXkC;;AAAA;AAYxCsB,gBAAAA,IAAI,CAACsC,aAAL;AACA3D,gBAAAA,UAAU,CAAC4D,YAAX,CAAwB;AAAEC,kBAAAA,OAAO,EAAE,8CAAX;AAA2DC,kBAAAA,MAAM,EAAE;AAAnE,iBAAxB;;AAbwC;AAAA;AAAA,uBAetCvB,iBAAiB,EAfqB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAkB5CG,gBAAAA,OAAO,CAACC,KAAR;AACMkB,gBAAAA,OAnBsC,GAmB3B9D,SAAS,CAACmD,MAAV,KAAqB,WAAtB,GAAqC,8BAArC,GAAsE,mCAnB1C;AAoBtCY,gBAAAA,MApBsC,GAoB5B/D,SAAS,CAACmD,MAAV,KAAqB,WAAtB,GAAqC,kBAArC,GAA0D,uBApB7B;AAqB5ClD,gBAAAA,UAAU,CAAC4D,YAAX,CAAwB;AAAEG,kBAAAA,QAAQ,EAAE,WAAZ;AAAyBF,kBAAAA,OAAO,EAAEA,OAAlC;AAA2CC,kBAAAA,MAAM,EAAEA;AAAnD,iBAAxB;;AArB4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApD;;AAAA;AAAA;AAAA;AAAA;AA2BH,GA7BD;;AA+BA,MAAME,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BhE,IAAAA,UAAU,CAACiE,gBAAX,GAA8BnB,gBAA9B,CAA+C,QAA/C;AAAA,0EAAyD,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AACrDA,gBAAAA,GAAG,CAACW,cAAJ,GADqD,CAChC;;AADgC;AAAA;AAAA,uBAG3CtB,OAAO,CAACtB,iBAAR,CAA0BsC,QAAQ,CAACd,gBAAgB,CAACtB,EAAlB,CAAlC,CAH2C;;AAAA;AAIjDhB,gBAAAA,UAAU,CAACkE,mBAAX;AACAlE,gBAAAA,UAAU,CAAC4D,YAAX,CAAwB;AAAEC,kBAAAA,OAAO,EAAE,+CAAX;AAA4DC,kBAAAA,MAAM,EAAE;AAApE,iBAAxB;AALiD;AAAA,uBAM3CvB,iBAAiB,EAN0B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASjDG,gBAAAA,OAAO,CAACC,KAAR;AACA3C,gBAAAA,UAAU,CAAC4D,YAAX,CAAwB;AAAEG,kBAAAA,QAAQ,EAAC,WAAX;AAAwBF,kBAAAA,OAAO,EAAE,iCAAjC;AAAoEC,kBAAAA,MAAM,EAAE;AAA5E,iBAAxB;;AAViD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzD;;AAAA;AAAA;AAAA;AAAA;AAcH,GAfD;;AAiBA,MAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5B9C,IAAAA,IAAI,CAAC+C,cAAL,GAAsBtB,gBAAtB,CAAuC,QAAvC;AAAA,0EAAiD,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7CA,gBAAAA,GAAG,CAACW,cAAJ,GAD6C,CACxB;;AACfhD,gBAAAA,OAFuC,GAE7B2B,EAAE,CAAClB,UAAH,EAF6B;AAAA;AAAA,uBAGvCoB,iBAAiB,CAAC7B,OAAD,CAHsB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjD;;AAAA;AAAA;AAAA;AAAA;AAKH,GAND;;AAQA,MAAM2D,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClB9B,IAAAA,iBAAiB;AACjBlB,IAAAA,IAAI,CAACiD,iBAAL;AACA1B,IAAAA,cAAc;AACdY,IAAAA,cAAc;AACdQ,IAAAA,eAAe;AACfG,IAAAA,iBAAiB;AACpB,GAPD;;AAUA,SAAO;AACHE,IAAAA,OAAO,EAAPA;AADG,GAAP;AAGH,CA7GD;;AAiHAE,MAAM,CAACzB,gBAAP,CAAwB,MAAxB,EAAgC,YAAM;AAElC,MAAMV,OAAO,GAAGvC,gBAAgB,EAAhC;AAEA,MAAMwC,EAAE,GAAGnB,WAAW,EAAtB;AAEA,MAAMsD,UAAU,GAAGrC,mBAAmB,CAACC,OAAD,EAAUC,EAAV,CAAtC;AAEAmC,EAAAA,UAAU,CAACH,OAAX;AAEH,CAVD","sourcesContent":["\r\nconst CategoriaService = () => {\r\n\r\n    const crearCategoria = async (categoria) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Crear'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const actualizarCategoria = async (categoria) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Actualizar'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const listarCategoria = async (filtros) => {\r\n\r\n        const filtrosDefecto = {\r\n            Descripcion: '',\r\n            ...filtros\r\n        }\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: filtrosDefecto,\r\n            url: 'Categoria/Listar'\r\n        })\r\n\r\n        return respuesta.Data;\r\n    }\r\n\r\n    const eliminarCategoria = async (id) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Eliminar'\r\n        })\r\n        return respuesta\r\n    }\r\n\r\n    const buscarCategoria = async (id) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Obtener'\r\n        })\r\n        return respuesta;\r\n           \r\n    }\r\n\r\n    return {\r\n        crearCategoria,\r\n        actualizarCategoria,\r\n        listarCategoria,\r\n        eliminarCategoria,\r\n        buscarCategoria\r\n    }\r\n}\r\n\r\nconst CategoriaUI = () => {\r\n  \r\n    const getFiltros = () => {\r\n        const arrFiltros = ['Descripcion'];\r\n\r\n        return AthenasNet.Mant.getFiltros(arrFiltros);\r\n\r\n    }\r\n\r\n    const generarTabla = (lstCategorias) => {\r\n\r\n        const data = {\r\n            filas: lstCategorias,\r\n            edita: true,\r\n            elimina: true\r\n        }\r\n\r\n        AthenasNet.compilaTemplate(AthenasNet.ID_TEMP_TBL_BODY, data, AthenasNet.Mant.SEL_TBL_BODY);\r\n        $(AthenasNet.Mant.SEL_TBL_MANT).DataTable();\r\n    }\r\n\r\n    const getCategoria = () => {\r\n        return AthenasNet.Mant.getEntidad(['Descripcion', 'Id', 'accion']);\r\n    }\r\n\r\n    return {\r\n        getCategoria,\r\n        generarTabla,\r\n        getFiltros\r\n    }\r\n}\r\n\r\nconst CategoriaController = (service, ui) => {\r\n    let lstCategorias = [];\r\n    let cateSeleccionada = {};\r\n    const { Mant } = AthenasNet;\r\n\r\n    const muestraCategorias = async (filtros = {}) => {\r\n        try {\r\n            lstCategorias = await service.listarCategoria(filtros);\r\n            ui.generarTabla(lstCategorias.map(c => ({\r\n                Id: c.Id,\r\n                Descripcion: c.Descripcion\r\n            })));\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    const manejaEvtTabla = () => {\r\n        Mant.getTblMantenedor().addEventListener('click', (evt) => {\r\n\r\n            if (evt.target.dataset.id) {\r\n                const { id, accion } = evt.target.dataset;\r\n\r\n                cateSeleccionada = lstCategorias.find(c => c.Id === parseInt(id));\r\n                cateSeleccionada.accion = accion;\r\n\r\n                if (accion === 'editar') {\r\n                    Mant.setFormMantenedor(cateSeleccionada);\r\n                }\r\n                else if (accion === 'eliminar') {\r\n                    console.log('eliminar')\r\n                    AthenasNet.mostrarConfirmacion();\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    const manejaEnvioCat = () => {\r\n\r\n        Mant.getFormMantenedor().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();\r\n\r\n            const categoria = ui.getCategoria();\r\n            try {\r\n                if (categoria.accion === 'registrar') {\r\n                    await service.crearCategoria(categoria);\r\n                    Mant.cerrarModMant();\r\n                    AthenasNet.muestraToast({mensaje: 'La categoría se registró satisfactoriamente',titulo: 'Registro exitoso'})\r\n                }\r\n                else if (categoria.accion === 'editar') {\r\n                    await service.actualizarCategoria(categoria);\r\n                    Mant.cerrarModMant();\r\n                    AthenasNet.muestraToast({ mensaje: 'La categoría se actualizó satisfactoriamente', titulo: 'Actualización exitosa' })\r\n                }\r\n                await muestraCategorias();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                const mensaje = (categoria.accion === 'registrar') ? 'Hubo un error en el registro' : 'Hubo un error en la actualización';\r\n                const titulo = (categoria.accion === 'registrar') ? 'Registro erróneo' : 'Actualización errónea';\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: mensaje, titulo: titulo })\r\n            }\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const manejaEnvioConf = () => {\r\n        AthenasNet.getFormConfirmar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            try {\r\n                await service.eliminarCategoria(parseInt(cateSeleccionada.Id));\r\n                AthenasNet.ocultarConfirmacion();\r\n                AthenasNet.muestraToast({ mensaje: 'La categoría fue eliminada satisfactoriamente', titulo: 'Eliminación exitosa' })\r\n                await muestraCategorias();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                AthenasNet.muestraToast({ cssClass:'bg-danger', mensaje: 'Hubo un error en la eliminación', titulo: 'Eliminación errónea' })\r\n            }\r\n            \r\n        })\r\n    }\r\n\r\n    const manejaEnvioFiltro = () => {\r\n        Mant.getFormFiltrar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            const filtros = ui.getFiltros();\r\n            await muestraCategorias(filtros);\r\n        })\r\n    }\r\n\r\n    const iniciar = () => {\r\n        muestraCategorias();\r\n        Mant.evtMostrarModMant();\r\n        manejaEvtTabla();\r\n        manejaEnvioCat();\r\n        manejaEnvioConf();\r\n        manejaEnvioFiltro();\r\n    }\r\n\r\n\r\n    return {\r\n        iniciar\r\n    }\r\n}\r\n\r\n\r\n\r\nwindow.addEventListener('load', () => {\r\n\r\n    const service = CategoriaService();\r\n\r\n    const ui = CategoriaUI();\r\n\r\n    const controller = CategoriaController(service, ui);\r\n\r\n    controller.iniciar();\r\n\r\n})"],"file":"categoria.js"}