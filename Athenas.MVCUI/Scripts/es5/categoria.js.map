{"version":3,"sources":["../es6/categoria.js"],"names":["CategoriaService","crearCategoria","categoria","AthenasNet","llamadaApi","type","data","JSON","stringify","url","respuesta","actualizarCategoria","listarCategoria","filtros","filtrosDefecto","Descripcion","Data","eliminarCategoria","id","Id","buscarCategoria","CategoriaUI","SELTBLCATEGORIA","SELBTNNUEVO","IDFORMCATEGORIA","IDFORMCONFIRMAR","SELTBLBODY","SELMODALCATE","SELMODALCONF","IDFORMFILTRAR","getTblCategoria","document","querySelector","getBtnNuevo","getFormCategoria","getElementById","getFormCateElements","elements","getFormEleValue","ele","value","setFormEleValue","getFormConfirmar","getFormFiltrar","getFiltros","ARRFILTROS","formFiltro","forEach","fil","generarTabla","lstCategorias","dataTemplate","filas","edita","elimina","compilaTemplate","$","DataTable","muestraCategoria","setEntidad","modal","evtMostrarModCategoria","evt","on","mostrarConfirmacion","ocultarConfirmacion","cerrarModCate","limpiarModalCat","getCategoria","arrCampos","getEntidad","CategoriaController","service","ui","cateSeleccionada","muestraCategorias","console","error","muestraToast","className","mensaje","titulo","configModalCate","e","manejaEvtTabla","addEventListener","target","dataset","accion","find","c","parseInt","log","manejaEnvioCat","preventDefault","limpiarMainForm","cerrarModalMainform","manejaEnvioConf","manejaEnvioFiltro","iniciar","window","controller"],"mappings":";;;;;;;;;;;;AACA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAE3B,MAAMC,cAAc;AAAA,uEAAG,iBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKC,UAAU,CAACC,UAAX,CAAsB;AAC1CC,gBAAAA,IAAI,EAAE,MADoC;AAE1CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,SAAf,CAFoC;AAG1CO,gBAAAA,GAAG,EAAE;AAHqC,eAAtB,CADL;;AAAA;AACbC,cAAAA,SADa;AAAA,+CAOZA,SAPY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdT,cAAc;AAAA;AAAA;AAAA,KAApB;;AAUA,MAAMU,mBAAmB;AAAA,wEAAG,kBAAOT,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEAC,UAAU,CAACC,UAAX,CAAsB;AAC1CC,gBAAAA,IAAI,EAAE,MADoC;AAE1CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,SAAf,CAFoC;AAG1CO,gBAAAA,GAAG,EAAE;AAHqC,eAAtB,CAFA;;AAAA;AAElBC,cAAAA,SAFkB;AAAA,gDAQjBA,SARiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBC,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAWA,MAAMC,eAAe;AAAA,wEAAG,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdC,cAAAA,cAFc;AAGhBC,gBAAAA,WAAW,EAAE;AAHG,iBAIbF,OAJa;AAAA;AAAA,qBAOIV,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAEQ,cADoC;AAE1CL,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CAPJ;;AAAA;AAOdC,cAAAA,SAPc;AAAA,gDAYbA,SAAS,CAACM,IAZG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfJ,eAAe;AAAA;AAAA;AAAA,KAArB;;AAeA,MAAMK,iBAAiB;AAAA,wEAAG,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEEf,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAE;AAAEa,kBAAAA,EAAE,EAAED;AAAN,iBADoC;AAE1CT,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CAFF;;AAAA;AAEhBC,cAAAA,SAFgB;AAAA,gDAMfA,SANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBO,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AASA,MAAMG,eAAe;AAAA,wEAAG,kBAAOF,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACIf,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAE;AAAEa,kBAAAA,EAAE,EAAED;AAAN,iBADoC;AAE1CT,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CADJ;;AAAA;AACdC,cAAAA,SADc;AAAA,gDAKbA,SALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfU,eAAe;AAAA;AAAA;AAAA,KAArB;;AASA,SAAO;AACHnB,IAAAA,cAAc,EAAdA,cADG;AAEHU,IAAAA,mBAAmB,EAAnBA,mBAFG;AAGHC,IAAAA,eAAe,EAAfA,eAHG;AAIHK,IAAAA,iBAAiB,EAAjBA,iBAJG;AAKHG,IAAAA,eAAe,EAAfA;AALG,GAAP;AAOH,CA/DD;;AAiEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AAEtB,MAAMC,eAAe,GAAG,eAAxB;AACA,MAAMC,WAAW,GAAG,YAApB,CAHsB,CAItB;;AACA,MAAMC,eAAe,GAAG,WAAxB;AACA,MAAMC,eAAe,GAAG,gBAAxB;AACA,MAAMC,UAAU,GAAG,qBAAnB;AACA,MAAMC,YAAY,GAAG,kBAArB,CARsB,CAStB;;AACA,MAAMC,YAAY,GAAG,kBAArB;AACA,MAAMC,aAAa,GAAG,cAAtB;;AAGA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB;AAAA,WAAMC,QAAQ,CAACC,aAAT,CAAuBV,eAAvB,CAAN;AAAA,GAAxB;;AAEA,MAAMW,WAAW,GAAG,SAAdA,WAAc;AAAA,WAAMF,QAAQ,CAACC,aAAT,CAAuBT,WAAvB,CAAN;AAAA,GAApB;;AAEA,MAAMW,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,WAAMH,QAAQ,CAACI,cAAT,CAAwBX,eAAxB,CAAN;AAAA,GAAzB;;AAEA,MAAMY,mBAAmB,GAAG,SAAtBA,mBAAsB;AAAA,WAAMF,gBAAgB,GAAGG,QAAzB;AAAA,GAA5B;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,GAAD;AAAA,WAASH,mBAAmB,GAAGG,GAAH,CAAnB,CAA2BC,KAApC;AAAA,GAAxB;;AAEA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACF,GAAD,EAAMC,KAAN,EAAgB;AAAEJ,IAAAA,mBAAmB,GAAGG,GAAH,CAAnB,CAA2BC,KAA3B,GAAmCA,KAAnC;AAA2C,GAArF;;AAEA,MAAME,gBAAgB,GAAG,SAAnBA,gBAAmB;AAAA,WAAMX,QAAQ,CAACI,cAAT,CAAwBV,eAAxB,CAAN;AAAA,GAAzB;;AAEA,MAAMkB,cAAc,GAAG,SAAjBA,cAAiB;AAAA,WAAMZ,QAAQ,CAACI,cAAT,CAAwBN,aAAxB,CAAN;AAAA,GAAvB;;AAEA,MAAMe,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,QAAMC,UAAU,GAAG,CAAC,aAAD,CAAnB;AAEA,QAAMC,UAAU,GAAGH,cAAc,EAAjC;AAEA,QAAI9B,OAAO,GAAG,EAAd;AAEAgC,IAAAA,UAAU,CAACE,OAAX,CAAmB,UAAAC,GAAG,EAAI;AACtBnC,MAAAA,OAAO,mCACAA,OADA,2BAEFmC,GAFE,EAEIF,UAAU,CAACE,GAAD,CAAV,CAAgBR,KAFpB,EAAP;AAIH,KALD;AAQA,WAAO3B,OAAP;AACH,GAhBD;;AAkBA,MAAMoC,YAAY,GAAG,SAAfA,YAAe,CAACC,aAAD,EAAmB;AACpC,QAAMC,YAAY,GAAG;AACjBC,MAAAA,KAAK,EAAEF,aADU;AAEjBG,MAAAA,KAAK,EAAE,IAFU;AAGjBC,MAAAA,OAAO,EAAE;AAHQ,KAArB;AAKAnD,IAAAA,UAAU,CAACoD,eAAX,CAA2B,eAA3B,EAA4CJ,YAA5C,EAA0DzB,UAA1D;AACA8B,IAAAA,CAAC,CAAClC,eAAD,CAAD,CAAmBmC,SAAnB;AACH,GARD;;AAUA,MAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACxD,SAAD,EAAe;AACpC;AACA;AACA;AACAC,IAAAA,UAAU,CAACwD,UAAX,CAAsBzD,SAAtB;AACAsD,IAAAA,CAAC,CAAC7B,YAAD,CAAD,CAAgBiC,KAAhB,CAAsB,MAAtB;AACH,GAND;;AAQA,MAAMC,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACC,GAAD,EAAS;AACpCN,IAAAA,CAAC,CAAC7B,YAAD,CAAD,CAAgBoC,EAAhB,CAAmB,eAAnB,EAAoCD,GAApC;AACH,GAFD;;AAIA,MAAME,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9BR,IAAAA,CAAC,CAAC5B,YAAD,CAAD,CAAgBgC,KAAhB,CAAsB,MAAtB;AACH,GAFD;;AAIA,MAAMK,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAC9BT,IAAAA,CAAC,CAAC5B,YAAD,CAAD,CAAgBgC,KAAhB,CAAsB,MAAtB;AACH,GAFD;;AAIA,MAAMM,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBV,IAAAA,CAAC,CAAC7B,YAAD,CAAD,CAAgBiC,KAAhB,CAAsB,MAAtB;AACH,GAFD;;AAIA,MAAMO,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B1B,IAAAA,eAAe,CAAC,aAAD,EAAgB,EAAhB,CAAf;AACAA,IAAAA,eAAe,CAAC,IAAD,EAAO,GAAP,CAAf;AACAA,IAAAA,eAAe,CAAC,QAAD,EAAW,WAAX,CAAf;AAEH,GALD;;AAOA,MAAM2B,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB,QAAMC,SAAS,GAAG,CAAC,aAAD,CAAlB;AACA,QAAMnE,SAAS,GAAGC,UAAU,CAACmE,UAAX,CAAsBD,SAAtB,CAAlB;AACA,WAAOnE,SAAP;AACH,GAJD;;AAMA,SAAO;AACH4B,IAAAA,eAAe,EAAfA,eADG;AAEHG,IAAAA,WAAW,EAAXA,WAFG;AAGHC,IAAAA,gBAAgB,EAAhBA,gBAHG;AAIHQ,IAAAA,gBAAgB,EAAhBA,gBAJG;AAKHJ,IAAAA,eAAe,EAAfA,eALG;AAMHG,IAAAA,eAAe,EAAfA,eANG;AAOHQ,IAAAA,YAAY,EAAZA,YAPG;AAQHY,IAAAA,sBAAsB,EAAtBA,sBARG;AASHH,IAAAA,gBAAgB,EAAhBA,gBATG;AAUHM,IAAAA,mBAAmB,EAAnBA,mBAVG;AAWHG,IAAAA,eAAe,EAAfA,eAXG;AAYHC,IAAAA,YAAY,EAAZA,YAZG;AAaHF,IAAAA,aAAa,EAAbA,aAbG;AAcHD,IAAAA,mBAAmB,EAAnBA,mBAdG;AAeHtB,IAAAA,cAAc,EAAdA,cAfG;AAgBHC,IAAAA,UAAU,EAAVA;AAhBG,GAAP;AAkBH,CAjHD;;AAmHA,IAAM2B,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,OAAD,EAAUC,EAAV,EAAiB;AACzC,MAAIvB,aAAa,GAAG,EAApB;AACA,MAAIwB,gBAAgB,GAAG,EAAvB;;AAGA,MAAMC,iBAAiB;AAAA,wEAAG,kBAAO9D,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEI2D,OAAO,CAAC5D,eAAR,CAAwBC,OAAO,GAAGA,OAAH,GAAa,EAA5C,CAFJ;;AAAA;AAElBqC,cAAAA,aAFkB;AAGlBuB,cAAAA,EAAE,CAACxB,YAAH,CAAgBC,aAAhB;AAHkB;AAAA;;AAAA;AAAA;AAAA;AAMlB0B,cAAAA,OAAO,CAACC,KAAR;AACA1E,cAAAA,UAAU,CAAC2E,YAAX,CAAwB;AAAEC,gBAAAA,SAAS,EAAE,WAAb;AAA0BC,gBAAAA,OAAO,EAAE,yCAAnC;AAA8EC,gBAAAA,MAAM,EAAE;AAAtF,eAAxB;;AAPkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBN,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AAWA,MAAMO,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BT,IAAAA,EAAE,CAACZ,sBAAH,CAA0B,UAACsB,CAAD,EAAO;AAC7B,UAAIV,EAAE,CAACnC,eAAH,CAAmB,QAAnB,MAAiC,WAArC,EAAkD;AAC9CmC,QAAAA,EAAE,CAAChC,eAAH,CAAmB,aAAnB,EAAkC,EAAlC;AACAgC,QAAAA,EAAE,CAAChC,eAAH,CAAmB,IAAnB,EAAyB,CAAzB;AACH;AACJ,KALD;AAMH,GAPD;;AASA,MAAM2C,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzBX,IAAAA,EAAE,CAAC3C,eAAH,GAAqBuD,gBAArB,CAAsC,OAAtC,EAA+C,UAACvB,GAAD,EAAS;AAEpD,UAAIA,GAAG,CAACwB,MAAJ,CAAWC,OAAX,CAAmBrE,EAAvB,EAA2B;AAAA,kCACA4C,GAAG,CAACwB,MAAJ,CAAWC,OADX;AAAA,YACfrE,EADe,uBACfA,EADe;AAAA,YACXsE,MADW,uBACXA,MADW;AAGvBd,QAAAA,gBAAgB,GAAGxB,aAAa,CAACuC,IAAd,CAAmB,UAAAC,CAAC;AAAA,iBAAIA,CAAC,CAACvE,EAAF,KAASwE,QAAQ,CAACzE,EAAD,CAArB;AAAA,SAApB,CAAnB;AACAwD,QAAAA,gBAAgB,CAACc,MAAjB,GAA0BA,MAA1B;;AAEA,YAAIA,MAAM,KAAK,QAAf,EAAyB;AACrBf,UAAAA,EAAE,CAACf,gBAAH,CAAoBgB,gBAApB;AACH,SAFD,MAGK,IAAIc,MAAM,KAAK,UAAf,EAA2B;AAC5BZ,UAAAA,OAAO,CAACgB,GAAR,CAAY,UAAZ;AACAnB,UAAAA,EAAE,CAACT,mBAAH;AACH;AACJ;AAGJ,KAlBD;AAmBH,GApBD;;AAsBA,MAAM6B,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAEzBpB,IAAAA,EAAE,CAACvC,gBAAH,GAAsBmD,gBAAtB,CAAuC,QAAvC;AAAA,0EAAiD,kBAAOvB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7CA,gBAAAA,GAAG,CAACgC,cAAJ;AAEM5F,gBAAAA,SAHuC,GAG3BuE,EAAE,CAACL,YAAH,EAH2B;AAAA;;AAAA,sBAKrClE,SAAS,CAACsF,MAAV,KAAqB,WALgB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAM/BhB,OAAO,CAACvE,cAAR,CAAuBC,SAAvB,CAN+B;;AAAA;AAOrCC,gBAAAA,UAAU,CAAC2E,YAAX,CAAwB;AAACC,kBAAAA,SAAS,EAAE,YAAZ;AAA0BC,kBAAAA,OAAO,EAAE;AAAnC,iBAAxB;AAPqC;AAAA;;AAAA;AAAA,sBAShC9E,SAAS,CAACsF,MAAV,KAAqB,QATW;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAU/BhB,OAAO,CAAC7D,mBAAR,CAA4BT,SAA5B,CAV+B;;AAAA;AAWrCC,gBAAAA,UAAU,CAAC2E,YAAX,CAAwB;AAAEC,kBAAAA,SAAS,EAAE,YAAb;AAA2BC,kBAAAA,OAAO,EAAE;AAApC,iBAAxB;;AAXqC;AAczC;AACA;AACA7E,gBAAAA,UAAU,CAAC4F,eAAX;AACA5F,gBAAAA,UAAU,CAAC6F,mBAAX;AAjByC;AAAA,uBAkBnCrB,iBAAiB,EAlBkB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAqBzCC,gBAAAA,OAAO,CAACC,KAAR;AACA1E,gBAAAA,UAAU,CAAC2E,YAAX,CAAwB;AAAEC,kBAAAA,SAAS,EAAE,WAAb;AAA0BC,kBAAAA,OAAO,EAAE,kCAAnC;AAAuEC,kBAAAA,MAAM,EAAE;AAA/E,iBAAxB;;AAtByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjD;;AAAA;AAAA;AAAA;AAAA;AA2BH,GA7BD;;AA+BA,MAAMgB,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BxB,IAAAA,EAAE,CAAC/B,gBAAH,GAAsB2C,gBAAtB,CAAuC,QAAvC;AAAA,0EAAiD,kBAAOvB,GAAP;AAAA;AAAA;AAAA;AAAA;AAC7CA,gBAAAA,GAAG,CAACgC,cAAJ,GAD6C,CACxB;;AADwB;AAAA;AAAA,uBAGnCtB,OAAO,CAACvD,iBAAR,CAA0B0E,QAAQ,CAACjB,gBAAgB,CAACvD,EAAlB,CAAlC,CAHmC;;AAAA;AAIzCsD,gBAAAA,EAAE,CAACR,mBAAH;AACA9D,gBAAAA,UAAU,CAAC2E,YAAX,CAAwB;AAAEC,kBAAAA,SAAS,EAAE,YAAb;AAA2BC,kBAAAA,OAAO,EAAE;AAApC,iBAAxB;AALyC;AAAA;;AAAA;AAAA;AAAA;AAQzCJ,gBAAAA,OAAO,CAACC,KAAR;AACA1E,gBAAAA,UAAU,CAAC2E,YAAX,CAAwB;AAAEC,kBAAAA,SAAS,EAAE,WAAb;AAA0BC,kBAAAA,OAAO,EAAE,kCAAnC;AAAuEC,kBAAAA,MAAM,EAAE;AAA/E,iBAAxB;;AATyC;AAW7CN,gBAAAA,iBAAiB;;AAX4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjD;;AAAA;AAAA;AAAA;AAAA;AAaH,GAdD;;AAgBA,MAAMuB,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5BzB,IAAAA,EAAE,CAAC9B,cAAH,GAAoB0C,gBAApB,CAAqC,QAArC;AAAA,0EAA8C,kBAAOvB,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1CA,gBAAAA,GAAG,CAACgC,cAAJ;AACMjF,gBAAAA,OAFoC,GAE1B4D,EAAE,CAAC7B,UAAH,EAF0B;AAAA;AAAA,uBAGpC+B,iBAAiB,CAAC9D,OAAD,CAHmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAA9C;;AAAA;AAAA;AAAA;AAAA;AAKH,GAND;;AAQA,MAAMsF,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClBxB,IAAAA,iBAAiB;AACjBS,IAAAA,cAAc;AACdS,IAAAA,cAAc;AACdI,IAAAA,eAAe;AACfC,IAAAA,iBAAiB;AACpB,GAND;;AASA,SAAO;AACHC,IAAAA,OAAO,EAAPA;AADG,GAAP;AAGH,CAlHD;;AAsHAC,MAAM,CAACf,gBAAP,CAAwB,MAAxB,EAAgC,YAAM;AAElC,MAAMb,OAAO,GAAGxE,gBAAgB,EAAhC;AAEA,MAAMyE,EAAE,GAAGpD,WAAW,EAAtB;AAEA,MAAMgF,UAAU,GAAG9B,mBAAmB,CAACC,OAAD,EAAUC,EAAV,CAAtC;AAEA4B,EAAAA,UAAU,CAACF,OAAX;AAGH,CAXD","sourcesContent":["\r\nconst CategoriaService = () => {\r\n\r\n    const crearCategoria = async (categoria) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Crear'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const actualizarCategoria = async (categoria) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Actualizar'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const listarCategoria = async (filtros) => {\r\n\r\n        const filtrosDefecto = {\r\n            Descripcion: '',\r\n            ...filtros\r\n        }\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: filtrosDefecto,\r\n            url: 'Categoria/Listar'\r\n        })\r\n\r\n        return respuesta.Data;\r\n    }\r\n\r\n    const eliminarCategoria = async (id) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Eliminar'\r\n        })\r\n        return respuesta\r\n    }\r\n\r\n    const buscarCategoria = async (id) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Obtener'\r\n        })\r\n        return respuesta;\r\n           \r\n    }\r\n\r\n    return {\r\n        crearCategoria,\r\n        actualizarCategoria,\r\n        listarCategoria,\r\n        eliminarCategoria,\r\n        buscarCategoria\r\n    }\r\n}\r\n\r\nconst CategoriaUI = () => {\r\n\r\n    const SELTBLCATEGORIA = '#tb-categoria';\r\n    const SELBTNNUEVO = '#btn-nuevo';\r\n    //const IDFORMCATEGORIA = 'form-categoria';\r\n    const IDFORMCATEGORIA = 'main-form';\r\n    const IDFORMCONFIRMAR = 'form-confirmar';\r\n    const SELTBLBODY = '#tb-categoria tbody';\r\n    const SELMODALCATE = '#modal-main-form';\r\n    //const SELMODALCATE = '#modal-categoria';\r\n    const SELMODALCONF = '#modal-confirmar';\r\n    const IDFORMFILTRAR = 'form-filtrar';\r\n    \r\n\r\n    const getTblCategoria = () => document.querySelector(SELTBLCATEGORIA);\r\n\r\n    const getBtnNuevo = () => document.querySelector(SELBTNNUEVO);\r\n\r\n    const getFormCategoria = () => document.getElementById(IDFORMCATEGORIA);\r\n\r\n    const getFormCateElements = () => getFormCategoria().elements;\r\n\r\n    const getFormEleValue = (ele) => getFormCateElements()[ele].value;\r\n\r\n    const setFormEleValue = (ele, value) => { getFormCateElements()[ele].value = value; }\r\n\r\n    const getFormConfirmar = () => document.getElementById(IDFORMCONFIRMAR);\r\n\r\n    const getFormFiltrar = () => document.getElementById(IDFORMFILTRAR);\r\n\r\n    const getFiltros = () => {\r\n        const ARRFILTROS = ['Descripcion'];\r\n\r\n        const formFiltro = getFormFiltrar();\r\n\r\n        let filtros = {};\r\n\r\n        ARRFILTROS.forEach(fil => {\r\n            filtros = {\r\n                ...filtros,\r\n                [fil]: formFiltro[fil].value\r\n            }\r\n        });\r\n        \r\n\r\n        return filtros;\r\n    }\r\n\r\n    const generarTabla = (lstCategorias) => {\r\n        const dataTemplate = {\r\n            filas: lstCategorias,\r\n            edita: true,\r\n            elimina: true\r\n        }\r\n        AthenasNet.compilaTemplate('temp-tbl-body', dataTemplate, SELTBLBODY);\r\n        $(SELTBLCATEGORIA).DataTable()\r\n    }\r\n\r\n    const muestraCategoria = (categoria) => {\r\n        //setFormEleValue('Descripcion', categoria.Descripcion);\r\n        //setFormEleValue('Id', categoria.Id);\r\n        //setFormEleValue('accion', categoria.accion);\r\n        AthenasNet.setEntidad(categoria)\r\n        $(SELMODALCATE).modal('show');\r\n    }\r\n\r\n    const evtMostrarModCategoria = (evt) => {\r\n        $(SELMODALCATE).on('show.bs.modal', evt)\r\n    }\r\n\r\n    const mostrarConfirmacion = () => {\r\n        $(SELMODALCONF).modal('show');\r\n    }\r\n\r\n    const ocultarConfirmacion = () => {\r\n        $(SELMODALCONF).modal('hide');\r\n    }\r\n\r\n    const cerrarModCate = () => {\r\n        $(SELMODALCATE).modal('hide');\r\n    }\r\n\r\n    const limpiarModalCat = () => {\r\n        setFormEleValue('Descripcion', '');\r\n        setFormEleValue('Id', '0');\r\n        setFormEleValue('accion', 'registrar');\r\n\r\n    }\r\n\r\n    const getCategoria = () => {\r\n        const arrCampos = ['Descripcion']\r\n        const categoria = AthenasNet.getEntidad(arrCampos);\r\n        return categoria;\r\n    }\r\n\r\n    return {\r\n        getTblCategoria,\r\n        getBtnNuevo,\r\n        getFormCategoria,\r\n        getFormConfirmar,\r\n        getFormEleValue,\r\n        setFormEleValue,\r\n        generarTabla,\r\n        evtMostrarModCategoria,\r\n        muestraCategoria,\r\n        mostrarConfirmacion,\r\n        limpiarModalCat,\r\n        getCategoria,\r\n        cerrarModCate,\r\n        ocultarConfirmacion,\r\n        getFormFiltrar,\r\n        getFiltros\r\n    }\r\n}\r\n\r\nconst CategoriaController = (service, ui) => {\r\n    let lstCategorias = [];\r\n    let cateSeleccionada = {};\r\n\r\n\r\n    const muestraCategorias = async (filtros) => {\r\n        try {\r\n            lstCategorias = await service.listarCategoria(filtros ? filtros : {});\r\n            ui.generarTabla(lstCategorias);\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n            AthenasNet.muestraToast({ className: 'bg-danger', mensaje: 'Hubo un error al obtener las categorías', titulo: 'Error' })\r\n        }\r\n    }\r\n\r\n    const configModalCate = () => {\r\n        ui.evtMostrarModCategoria((e) => {\r\n            if (ui.getFormEleValue('accion') === 'registrar') {\r\n                ui.setFormEleValue('Descripcion', '');\r\n                ui.setFormEleValue('Id', 0);\r\n            }\r\n        });\r\n    }\r\n\r\n    const manejaEvtTabla = () => {\r\n        ui.getTblCategoria().addEventListener('click', (evt) => {\r\n\r\n            if (evt.target.dataset.id) {\r\n                const { id, accion } = evt.target.dataset;\r\n\r\n                cateSeleccionada = lstCategorias.find(c => c.Id === parseInt(id));\r\n                cateSeleccionada.accion = accion;\r\n\r\n                if (accion === 'editar') {\r\n                    ui.muestraCategoria(cateSeleccionada);\r\n                }\r\n                else if (accion === 'eliminar') {\r\n                    console.log('eliminar')\r\n                    ui.mostrarConfirmacion();\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    const manejaEnvioCat = () => {\r\n\r\n        ui.getFormCategoria().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();\r\n\r\n            const categoria = ui.getCategoria();\r\n            try {\r\n                if (categoria.accion === 'registrar') {\r\n                    await service.crearCategoria(categoria);\r\n                    AthenasNet.muestraToast({className: 'bg-success', mensaje: 'Categoría registrada exitosamente'})\r\n                }\r\n                else if (categoria.accion === 'editar') {\r\n                    await service.actualizarCategoria(categoria);\r\n                    AthenasNet.muestraToast({ className: 'bg-success', mensaje: 'Categoría actualizada exitosamente' })\r\n                }\r\n\r\n                //ui.limpiarModalCat();\r\n                //ui.cerrarModCate();\r\n                AthenasNet.limpiarMainForm();\r\n                AthenasNet.cerrarModalMainform();\r\n                await muestraCategorias();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                AthenasNet.muestraToast({ className: 'bg-danger', mensaje: 'No se pudo realizar la operación', titulo: 'Error' })\r\n            }\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const manejaEnvioConf = () => {\r\n        ui.getFormConfirmar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            try {\r\n                await service.eliminarCategoria(parseInt(cateSeleccionada.Id));\r\n                ui.ocultarConfirmacion();\r\n                AthenasNet.muestraToast({ className: 'bg-success', mensaje: 'Categoría eliminada satisfactoriamente'})\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                AthenasNet.muestraToast({ className: 'bg-danger', mensaje: 'No se pudo eliminar la categoría', titulo: 'Error' })\r\n            }\r\n            muestraCategorias();\r\n        })\r\n    }\r\n\r\n    const manejaEnvioFiltro = () => {\r\n        ui.getFormFiltrar().addEventListener('submit',async (evt) => {\r\n            evt.preventDefault();\r\n            const filtros = ui.getFiltros();\r\n            await muestraCategorias(filtros)\r\n        })\r\n    }\r\n\r\n    const iniciar = () => {\r\n        muestraCategorias();\r\n        manejaEvtTabla();\r\n        manejaEnvioCat();\r\n        manejaEnvioConf();\r\n        manejaEnvioFiltro();\r\n    }\r\n\r\n\r\n    return {\r\n        iniciar\r\n    }\r\n}\r\n\r\n\r\n\r\nwindow.addEventListener('load', () => {\r\n\r\n    const service = CategoriaService();\r\n\r\n    const ui = CategoriaUI();\r\n\r\n    const controller = CategoriaController(service, ui);\r\n\r\n    controller.iniciar();\r\n\r\n\r\n})"],"file":"categoria.js"}