{"version":3,"sources":["../es6/categoria.js"],"names":["CategoriaService","crearCategoria","categoria","AthenasNet","llamadaApi","type","data","JSON","stringify","url","respuesta","actualizarCategoria","listarCategoria","filtros","filtrosDefecto","Descripcion","Data","eliminarCategoria","id","Id","buscarCategoria","CategoriaUI","SELTBLCATEGORIA","SELBTNNUEVO","IDFORMCATEGORIA","IDFORMCONFIRMAR","SELTBLBODY","SELMODALCATE","SELMODALCONF","IDFORMFILTRAR","getTblCategoria","document","querySelector","getBtnNuevo","getFormCategoria","getElementById","getFormCateElements","elements","getFormEleValue","ele","value","setFormEleValue","getFormConfirmar","getFormFiltrar","getFiltros","elementosFormulario","arrFiltros","forEach","fil","generarTabla","lstCategorias","compilaTemplate","filas","$","DataTable","muestraCategoria","accion","modal","generarFila","template","evtMostrarModCategoria","evt","on","limpiarCategoria","mostrarConfirmacion","ocultarConfirmacion","cerrarModCate","limpiarModalCat","getCategoria","parseInt","CategoriaController","service","ui","cateSeleccionada","muestraCategorias","console","error","manejaEvtTabla","addEventListener","target","dataset","find","c","log","manejaEnvioCat","preventDefault","muestraToast","mensaje","titulo","cssClass","manejaEnvioConf","manejaEnvioFiltro","iniciar","window","controller"],"mappings":"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","sourcesContent":["\r\nconst CategoriaService = () => {\r\n\r\n    const crearCategoria = async (categoria) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Crear'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const actualizarCategoria = async (categoria) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Actualizar'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const listarCategoria = async (filtros) => {\r\n\r\n        const filtrosDefecto = {\r\n            Descripcion: '',\r\n            ...filtros\r\n        }\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: filtrosDefecto,\r\n            url: 'Categoria/Listar'\r\n        })\r\n\r\n        return respuesta.Data;\r\n    }\r\n\r\n    const eliminarCategoria = async (id) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Eliminar'\r\n        })\r\n        return respuesta\r\n    }\r\n\r\n    const buscarCategoria = async (id) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Obtener'\r\n        })\r\n        return respuesta;\r\n           \r\n    }\r\n\r\n    return {\r\n        crearCategoria,\r\n        actualizarCategoria,\r\n        listarCategoria,\r\n        eliminarCategoria,\r\n        buscarCategoria\r\n    }\r\n}\r\n\r\nconst CategoriaUI = () => {\r\n\r\n    const SELTBLCATEGORIA = '#tb-categoria';\r\n    const SELBTNNUEVO = '#btn-nuevo';\r\n    const IDFORMCATEGORIA = 'form-categoria';\r\n    const IDFORMCONFIRMAR = 'form-confirmar';\r\n    const SELTBLBODY = '#tb-categoria tbody';\r\n    const SELMODALCATE = '#modal-categoria';\r\n    const SELMODALCONF = '#modal-confirmar';\r\n    const IDFORMFILTRAR = 'form-filtrar';\r\n\r\n    const getTblCategoria = () => document.querySelector(SELTBLCATEGORIA);\r\n\r\n    const getBtnNuevo = () => document.querySelector(SELBTNNUEVO);\r\n\r\n    const getFormCategoria = () => document.getElementById(IDFORMCATEGORIA);\r\n\r\n    const getFormCateElements = () => getFormCategoria().elements;\r\n\r\n    const getFormEleValue = (ele) => getFormCateElements()[ele].value;\r\n\r\n    const setFormEleValue = (ele, value) => { getFormCateElements()[ele].value = value; }\r\n\r\n    const getFormConfirmar = () => document.getElementById(IDFORMCONFIRMAR);\r\n\r\n    const getFormFiltrar = () => document.getElementById(IDFORMFILTRAR);\r\n\r\n    const getFiltros = () => {\r\n        const elementosFormulario = getFormFiltrar().elements;\r\n\r\n        const arrFiltros = ['Descripcion'];\r\n\r\n        let filtros = {};\r\n\r\n        arrFiltros.forEach(fil => {\r\n            filtros = {\r\n                ...filtros,\r\n                [fil]: elementosFormulario[fil].value\r\n            }\r\n        })\r\n\r\n\r\n        return filtros;\r\n\r\n    }\r\n\r\n    const generarTabla = (lstCategorias) => {\r\n        //const tBody = document.querySelector(SELTBLBODY);\r\n\r\n        //let tableBody = \"\";\r\n\r\n        //lstCategorias.forEach((cat) => {\r\n        //    tableBody += generarFila(cat);\r\n        //});\r\n\r\n        //tBody.innerHTML = tableBody;\r\n        AthenasNet.compilaTemplate('temp-tbl-body', { filas: lstCategorias }, SELTBLBODY);\r\n        $(SELTBLCATEGORIA).DataTable();\r\n    }\r\n\r\n    const muestraCategoria = (categoria) => {\r\n        setFormEleValue('Descripcion', categoria.Descripcion);\r\n        setFormEleValue('Id', categoria.Id);\r\n        setFormEleValue('accion', categoria.accion);\r\n        $(SELMODALCATE).modal('show');\r\n    }\r\n\r\n    const generarFila = (categoria) => {\r\n        let template = `\r\n            <tr>\r\n                <td>${categoria.Id}</td>\r\n                <td>${categoria.Descripcion}</td>\r\n                <td>\r\n                    <button type=\"button\" class=\"btn btn-success btn-sm btn-sin-click\" data-id=\"${categoria.Id}\" data-accion=\"editar\">\r\n                        <i class=\"fas fa-edit\"></i>\r\n                    </button>\r\n                    <button type=\"button\" class=\"btn btn-success btn-sm btn-sin-click\" data-id=\"${categoria.Id}\" data-accion=\"eliminar\">\r\n                        <i class=\"fas fa-trash-alt\" data-del-action=\"true\"></i>\r\n                    </button>\r\n                </td>\r\n            </tr>\r\n        `;\r\n\r\n        return template;\r\n    }\r\n\r\n    const evtMostrarModCategoria = (evt) => {\r\n        $(SELMODALCATE).on('hide.bs.modal', () => {\r\n            limpiarCategoria();\r\n        })\r\n    }\r\n\r\n    const mostrarConfirmacion = () => {\r\n        $(SELMODALCONF).modal('show');\r\n    }\r\n\r\n    const ocultarConfirmacion = () => {\r\n        $(SELMODALCONF).modal('hide');\r\n    }\r\n\r\n    const cerrarModCate = () => {\r\n        $(SELMODALCATE).modal('hide');\r\n    }\r\n\r\n    const limpiarModalCat = () => {\r\n        setFormEleValue('Descripcion', '');\r\n        setFormEleValue('Id', '0');\r\n        setFormEleValue('accion', 'registrar');\r\n\r\n    }\r\n\r\n    const getCategoria = () => {\r\n        const categoria = {\r\n            Descripcion: getFormEleValue('Descripcion'),\r\n            Id: parseInt(getFormEleValue('Id')),\r\n            accion: getFormEleValue('accion')\r\n        };\r\n\r\n        return categoria;\r\n    }\r\n\r\n    const limpiarCategoria = () => {\r\n        const elementosFormulario = getFormCateElements();\r\n\r\n        const arrFiltros = ['Descripcion'];\r\n\r\n        arrFiltros.forEach(fil => {\r\n            elementosFormulario[fil].value = '';\r\n        })\r\n\r\n        elementosFormulario['Id'].value = '0';\r\n        elementosFormulario['accion'].value = 'registrar';\r\n        \r\n    }\r\n\r\n    return {\r\n        getTblCategoria,\r\n        getBtnNuevo,\r\n        getFormCategoria,\r\n        getFormConfirmar,\r\n        getFormEleValue,\r\n        setFormEleValue,\r\n        generarTabla,\r\n        evtMostrarModCategoria,\r\n        muestraCategoria,\r\n        mostrarConfirmacion,\r\n        limpiarModalCat,\r\n        getCategoria,\r\n        cerrarModCate,\r\n        ocultarConfirmacion,\r\n        getFormFiltrar,\r\n        getFiltros,\r\n        limpiarCategoria\r\n    }\r\n}\r\n\r\nconst CategoriaController = (service, ui) => {\r\n    let lstCategorias = [];\r\n    let cateSeleccionada = {};\r\n\r\n\r\n    const muestraCategorias = async (filtros = {}) => {\r\n        try {\r\n            lstCategorias = await service.listarCategoria(filtros);\r\n            ui.generarTabla(lstCategorias);\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    //const configModalCate = () => {\r\n    //    ui.evtMostrarModCategoria((e) => {\r\n    //        if (ui.getFormEleValue('accion') === 'registrar') {\r\n    //            ui.setFormEleValue('descripcion', '');\r\n    //            ui.setFormEleValue('hdn-id', 0);\r\n    //        }\r\n    //    });\r\n    //}\r\n\r\n    const manejaEvtTabla = () => {\r\n        ui.getTblCategoria().addEventListener('click', (evt) => {\r\n\r\n            if (evt.target.dataset.id) {\r\n                const { id, accion } = evt.target.dataset;\r\n\r\n                cateSeleccionada = lstCategorias.find(c => c.Id === parseInt(id));\r\n                cateSeleccionada.accion = accion;\r\n\r\n                if (accion === 'editar') {\r\n                    ui.muestraCategoria(cateSeleccionada);\r\n                }\r\n                else if (accion === 'eliminar') {\r\n                    console.log('eliminar')\r\n                    ui.mostrarConfirmacion();\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    const manejaEnvioCat = () => {\r\n\r\n        ui.getFormCategoria().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();\r\n\r\n            const categoria = ui.getCategoria();\r\n            try {\r\n                if (categoria.accion === 'registrar') {\r\n                    await service.crearCategoria(categoria);\r\n                    ui.cerrarModCate();\r\n                    AthenasNet.muestraToast({mensaje: 'La categoría se registró satisfactoriamente',titulo: 'Registro exitoso'})\r\n                }\r\n                else if (categoria.accion === 'editar') {\r\n                    await service.actualizarCategoria(categoria);\r\n                    ui.cerrarModCate();\r\n                    AthenasNet.muestraToast({ mensaje: 'La categoría se actualizó satisfactoriamente', titulo: 'Actualización exitosa' })\r\n                }\r\n                await muestraCategorias();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                const mensaje = (categoria.accion === 'registrar') ? 'Hubo un error en el registro' : 'Hubo un error en la actualización';\r\n                const titulo = (categoria.accion === 'registrar') ? 'Registro erróneo' : 'Actualización errónea';\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: mensaje, titulo: titulo })\r\n            }\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const manejaEnvioConf = () => {\r\n        ui.getFormConfirmar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            try {\r\n                await service.eliminarCategoria(parseInt(cateSeleccionada.Id));\r\n                ui.ocultarConfirmacion();\r\n                AthenasNet.muestraToast({ mensaje: 'La categoría fue eliminada satisfactoriamente', titulo: 'Eliminación exitosa' })\r\n                await muestraCategorias();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                AthenasNet.muestraToast({ cssClass:'bg-danger', mensaje: 'Hubo un error en la eliminación', titulo: 'Eliminación errónea' })\r\n            }\r\n            \r\n        })\r\n    }\r\n\r\n    const manejaEnvioFiltro = () => {\r\n        ui.getFormFiltrar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            const filtros = ui.getFiltros();\r\n            await muestraCategorias(filtros);\r\n        })\r\n    }\r\n\r\n    const iniciar = () => {\r\n        muestraCategorias();\r\n        //configModalCate();\r\n        ui.evtMostrarModCategoria();\r\n        manejaEvtTabla();\r\n        manejaEnvioCat();\r\n        manejaEnvioConf();\r\n        manejaEnvioFiltro();\r\n    }\r\n\r\n\r\n    return {\r\n        iniciar\r\n    }\r\n}\r\n\r\n\r\n\r\nwindow.addEventListener('load', () => {\r\n\r\n    const service = CategoriaService();\r\n\r\n    const ui = CategoriaUI();\r\n\r\n    const controller = CategoriaController(service, ui);\r\n\r\n    controller.iniciar();\r\n\r\n})"],"file":"categoria.js"}