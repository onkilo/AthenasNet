{"version":3,"sources":["../es6/categoria.js"],"names":["CategoriaService","crearCategoria","categoria","AthenasNet","llamadaApi","type","data","JSON","stringify","url","respuesta","actualizarCategoria","listarCategoria","filtros","filtrosDefecto","Descripcion","Data","eliminarCategoria","id","Id","buscarCategoria","CategoriaUI","SELTBLCATEGORIA","SELBTNNUEVO","IDFORMCATEGORIA","SELTBLBODY","SELMODALCATE","IDFORMFILTRAR","getTblCategoria","document","querySelector","getBtnNuevo","getFormCategoria","getElementById","getFormCateElements","elements","getFormEleValue","ele","value","setFormEleValue","getFormFiltrar","getFiltros","elementosFormulario","arrFiltros","forEach","fil","generarTabla","lstCategorias","compilaTemplate","filas","$","DataTable","muestraCategoria","accion","modal","evtMostrarModCategoria","evt","on","limpiarCategoria","cerrarModCate","limpiarModalCat","getCategoria","parseInt","CategoriaController","service","ui","cateSeleccionada","muestraCategorias","console","error","manejaEvtTabla","addEventListener","target","dataset","find","c","log","mostrarConfirmacion","manejaEnvioCat","preventDefault","muestraToast","mensaje","titulo","cssClass","manejaEnvioConf","getFormConfirmar","ocultarConfirmacion","manejaEnvioFiltro","iniciar","window","controller"],"mappings":"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","sourcesContent":["\r\nconst CategoriaService = () => {\r\n\r\n    const crearCategoria = async (categoria) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Crear'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const actualizarCategoria = async (categoria) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Actualizar'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const listarCategoria = async (filtros) => {\r\n\r\n        const filtrosDefecto = {\r\n            Descripcion: '',\r\n            ...filtros\r\n        }\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: filtrosDefecto,\r\n            url: 'Categoria/Listar'\r\n        })\r\n\r\n        return respuesta.Data;\r\n    }\r\n\r\n    const eliminarCategoria = async (id) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Eliminar'\r\n        })\r\n        return respuesta\r\n    }\r\n\r\n    const buscarCategoria = async (id) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Obtener'\r\n        })\r\n        return respuesta;\r\n           \r\n    }\r\n\r\n    return {\r\n        crearCategoria,\r\n        actualizarCategoria,\r\n        listarCategoria,\r\n        eliminarCategoria,\r\n        buscarCategoria\r\n    }\r\n}\r\n\r\nconst CategoriaUI = () => {\r\n\r\n    const SELTBLCATEGORIA = '#tb-categoria';\r\n    const SELBTNNUEVO = '#btn-nuevo';\r\n    const IDFORMCATEGORIA = 'form-categoria';\r\n    const SELTBLBODY = '#tb-categoria tbody';\r\n    const SELMODALCATE = '#modal-categoria';\r\n    const IDFORMFILTRAR = 'form-filtrar';\r\n\r\n    const getTblCategoria = () => document.querySelector(SELTBLCATEGORIA);\r\n\r\n    const getBtnNuevo = () => document.querySelector(SELBTNNUEVO);\r\n\r\n    const getFormCategoria = () => document.getElementById(IDFORMCATEGORIA);\r\n\r\n    const getFormCateElements = () => getFormCategoria().elements;\r\n\r\n    const getFormEleValue = (ele) => getFormCateElements()[ele].value;\r\n\r\n    const setFormEleValue = (ele, value) => { getFormCateElements()[ele].value = value; }\r\n\r\n\r\n    const getFormFiltrar = () => document.getElementById(IDFORMFILTRAR);\r\n\r\n    const getFiltros = () => {\r\n        const elementosFormulario = getFormFiltrar().elements;\r\n\r\n        const arrFiltros = ['Descripcion'];\r\n\r\n        let filtros = {};\r\n\r\n        arrFiltros.forEach(fil => {\r\n            filtros = {\r\n                ...filtros,\r\n                [fil]: elementosFormulario[fil].value\r\n            }\r\n        })\r\n\r\n\r\n        return filtros;\r\n\r\n    }\r\n\r\n    const generarTabla = (lstCategorias) => {\r\n        AthenasNet.compilaTemplate('temp-tbl-body', { filas: lstCategorias }, SELTBLBODY);\r\n        $(SELTBLCATEGORIA).DataTable();\r\n    }\r\n\r\n    const muestraCategoria = (categoria) => {\r\n        setFormEleValue('Descripcion', categoria.Descripcion);\r\n        setFormEleValue('Id', categoria.Id);\r\n        setFormEleValue('accion', categoria.accion);\r\n        $(SELMODALCATE).modal('show');\r\n    }\r\n\r\n    const evtMostrarModCategoria = (evt) => {\r\n        $(SELMODALCATE).on('hide.bs.modal', () => {\r\n            limpiarCategoria();\r\n        })\r\n    }\r\n\r\n    const cerrarModCate = () => {\r\n        $(SELMODALCATE).modal('hide');\r\n    }\r\n\r\n    const limpiarModalCat = () => {\r\n        setFormEleValue('Descripcion', '');\r\n        setFormEleValue('Id', '0');\r\n        setFormEleValue('accion', 'registrar');\r\n\r\n    }\r\n\r\n    const getCategoria = () => {\r\n        const categoria = {\r\n            Descripcion: getFormEleValue('Descripcion'),\r\n            Id: parseInt(getFormEleValue('Id')),\r\n            accion: getFormEleValue('accion')\r\n        };\r\n\r\n        return categoria;\r\n    }\r\n\r\n    const limpiarCategoria = () => {\r\n        const elementosFormulario = getFormCateElements();\r\n\r\n        const arrFiltros = ['Descripcion'];\r\n\r\n        arrFiltros.forEach(fil => {\r\n            elementosFormulario[fil].value = '';\r\n        })\r\n\r\n        elementosFormulario['Id'].value = '0';\r\n        elementosFormulario['accion'].value = 'registrar';\r\n        \r\n    }\r\n\r\n    return {\r\n        getTblCategoria,\r\n        getBtnNuevo,\r\n        getFormCategoria,\r\n        getFormEleValue,\r\n        setFormEleValue,\r\n        generarTabla,\r\n        evtMostrarModCategoria,\r\n        muestraCategoria,\r\n        limpiarModalCat,\r\n        getCategoria,\r\n        cerrarModCate,\r\n        getFormFiltrar,\r\n        getFiltros,\r\n        limpiarCategoria\r\n    }\r\n}\r\n\r\nconst CategoriaController = (service, ui) => {\r\n    let lstCategorias = [];\r\n    let cateSeleccionada = {};\r\n\r\n\r\n    const muestraCategorias = async (filtros = {}) => {\r\n        try {\r\n            lstCategorias = await service.listarCategoria(filtros);\r\n            ui.generarTabla(lstCategorias);\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    const manejaEvtTabla = () => {\r\n        ui.getTblCategoria().addEventListener('click', (evt) => {\r\n\r\n            if (evt.target.dataset.id) {\r\n                const { id, accion } = evt.target.dataset;\r\n\r\n                cateSeleccionada = lstCategorias.find(c => c.Id === parseInt(id));\r\n                cateSeleccionada.accion = accion;\r\n\r\n                if (accion === 'editar') {\r\n                    ui.muestraCategoria(cateSeleccionada);\r\n                }\r\n                else if (accion === 'eliminar') {\r\n                    console.log('eliminar')\r\n                    AthenasNet.mostrarConfirmacion();\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    const manejaEnvioCat = () => {\r\n\r\n        ui.getFormCategoria().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();\r\n\r\n            const categoria = ui.getCategoria();\r\n            try {\r\n                if (categoria.accion === 'registrar') {\r\n                    await service.crearCategoria(categoria);\r\n                    ui.cerrarModCate();\r\n                    AthenasNet.muestraToast({mensaje: 'La categoría se registró satisfactoriamente',titulo: 'Registro exitoso'})\r\n                }\r\n                else if (categoria.accion === 'editar') {\r\n                    await service.actualizarCategoria(categoria);\r\n                    ui.cerrarModCate();\r\n                    AthenasNet.muestraToast({ mensaje: 'La categoría se actualizó satisfactoriamente', titulo: 'Actualización exitosa' })\r\n                }\r\n                await muestraCategorias();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                const mensaje = (categoria.accion === 'registrar') ? 'Hubo un error en el registro' : 'Hubo un error en la actualización';\r\n                const titulo = (categoria.accion === 'registrar') ? 'Registro erróneo' : 'Actualización errónea';\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: mensaje, titulo: titulo })\r\n            }\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const manejaEnvioConf = () => {\r\n        AthenasNet.getFormConfirmar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            try {\r\n                await service.eliminarCategoria(parseInt(cateSeleccionada.Id));\r\n                AthenasNet.ocultarConfirmacion();\r\n                AthenasNet.muestraToast({ mensaje: 'La categoría fue eliminada satisfactoriamente', titulo: 'Eliminación exitosa' })\r\n                await muestraCategorias();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                AthenasNet.muestraToast({ cssClass:'bg-danger', mensaje: 'Hubo un error en la eliminación', titulo: 'Eliminación errónea' })\r\n            }\r\n            \r\n        })\r\n    }\r\n\r\n    const manejaEnvioFiltro = () => {\r\n        ui.getFormFiltrar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            const filtros = ui.getFiltros();\r\n            await muestraCategorias(filtros);\r\n        })\r\n    }\r\n\r\n    const iniciar = () => {\r\n        muestraCategorias();\r\n        ui.evtMostrarModCategoria();\r\n        manejaEvtTabla();\r\n        manejaEnvioCat();\r\n        manejaEnvioConf();\r\n        manejaEnvioFiltro();\r\n    }\r\n\r\n\r\n    return {\r\n        iniciar\r\n    }\r\n}\r\n\r\n\r\n\r\nwindow.addEventListener('load', () => {\r\n\r\n    const service = CategoriaService();\r\n\r\n    const ui = CategoriaUI();\r\n\r\n    const controller = CategoriaController(service, ui);\r\n\r\n    controller.iniciar();\r\n\r\n})"],"file":"categoria.js"}