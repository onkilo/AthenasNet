{"version":3,"sources":["../es6/promocion/promocionController.js"],"names":["ProductoController","service","ui","productoService","lstPromociones","promSeleccionado","AthenasNet","Mant","muestraPromociones","filtros","listar","generarTabla","map","p","Id","Producto","Descripcion","Tipo","Valor","toFixed","FechaInicio","formatFecha","FFechaInicio","FechaFin","FFechaFin","console","error","manejaEvtTabla","getTblMantenedor","addEventListener","evt","target","dataset","id","accion","find","c","parseInt","muestraPoductos","setFormMantenedor","parseFloat","log","mostrarConfirmacion","manejaEnvioProm","getFormMantenedor","preventDefault","promocion","getPromocion","tienePromociones","crear","cerrarModMant","muestraToast","mensaje","titulo","cssClass","actualizar","manejaEnvioConf","getFormConfirmar","eliminar","ocultarConfirmacion","manejaEnvioFiltro","getFormFiltrar","getFiltros","lstProductos","tempCatData","filas","compilaTemplate","ID_TEMP_PROD","SEL_CBO_PROD","manejaAbreModal","getBtnNuevo","iniciar","configuraTamModal","evtMostrarModMant"],"mappings":";;;;;;;;;;;;AACA,IAAMA,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,OAAD,EAAUC,EAAV,EAAcC,eAAd,EAAkC;AACzD,MAAIC,cAAc,GAAG,EAArB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AAFyD,oBAGxCC,UAHwC;AAAA,MAGjDC,IAHiD,eAGjDA,IAHiD;;AAKzD,MAAMC,kBAAkB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAOC,cAAAA,OAAP,2DAAiB,EAAjB;AAAA;AAAA;AAAA,qBAEIR,OAAO,CAACS,MAAR,CAAeD,OAAf,CAFJ;;AAAA;AAEnBL,cAAAA,cAFmB;AAGnBF,cAAAA,EAAE,CAACS,YAAH,CAAgBP,cAAc,CAACQ,GAAf,CAAmB,UAAAC,CAAC;AAAA,uBAAK;AACrCC,kBAAAA,EAAE,EAAED,CAAC,CAACC,EAD+B;AAErCC,kBAAAA,QAAQ,EAAEF,CAAC,CAACE,QAAF,CAAWC,WAFgB;AAGrCC,kBAAAA,IAAI,EAAGJ,CAAC,CAACI,IAAF,KAAW,CAAZ,GAAiB,MAAjB,GAA0B,YAHK;AAIrCC,kBAAAA,KAAK,EAAGL,CAAC,CAACI,IAAF,KAAW,CAAZ,iBAAwBJ,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgB,CAAhB,CAAxB,gBAAoDN,CAAC,CAACK,KAAF,CAAQC,OAAR,CAAgB,CAAhB,CAApD,CAJ8B;AAKrCC,kBAAAA,WAAW,EAAEd,UAAU,CAACe,WAAX,CAAuBR,CAAC,CAACS,YAAzB,CALwB;AAMrCC,kBAAAA,QAAQ,EAAEjB,UAAU,CAACe,WAAX,CAAuBR,CAAC,CAACW,SAAzB;AAN2B,iBAAL;AAAA,eAApB,CAAhB;AAHmB;AAAA;;AAAA;AAAA;AAAA;AAanBC,cAAAA,OAAO,CAACC,KAAR;;AAbmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAlBlB,kBAAkB;AAAA;AAAA;AAAA,KAAxB;;AAkBA,MAAMmB,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AACzBpB,IAAAA,IAAI,CAACqB,gBAAL,GAAwBC,gBAAxB,CAAyC,OAAzC;AAAA,0EAAkD,kBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,qBAE1CA,GAAG,CAACC,MAAJ,CAAWC,OAAX,CAAmBC,EAFuB;AAAA;AAAA;AAAA;;AAAA,sCAGnBH,GAAG,CAACC,MAAJ,CAAWC,OAHQ,EAGlCC,EAHkC,uBAGlCA,EAHkC,EAG9BC,MAH8B,uBAG9BA,MAH8B;AAK1C7B,gBAAAA,gBAAgB,GAAGD,cAAc,CAAC+B,IAAf,CAAoB,UAAAC,CAAC;AAAA,yBAAIA,CAAC,CAACtB,EAAF,KAASuB,QAAQ,CAACJ,EAAD,CAArB;AAAA,iBAArB,CAAnB;AACA5B,gBAAAA,gBAAgB,CAAC6B,MAAjB,GAA0BA,MAA1B;;AAN0C,sBAQtCA,MAAM,KAAK,QAR2B;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAShCI,eAAe,EATiB;;AAAA;AAUtC/B,gBAAAA,IAAI,CAACgC,iBAAL,iCAEWlC,gBAFX;AAGQa,kBAAAA,KAAK,EAAEsB,UAAU,CAACnC,gBAAgB,CAACa,KAAlB,CAAV,CAAmCC,OAAnC,CAA2C,CAA3C,CAHf;AAIQJ,kBAAAA,QAAQ,EAAEV,gBAAgB,CAACU,QAAjB,CAA0BD,EAJ5C;AAKQS,kBAAAA,QAAQ,EAAElB,gBAAgB,CAACmB,SALnC;AAMQJ,kBAAAA,WAAW,EAAEf,gBAAgB,CAACiB;AANtC,oBAOO,CAAC,QAAD,EAAW,cAAX,EAA2B,WAA3B,CAPP;AAVsC;AAAA;;AAAA;AAmBrC,oBAAIY,MAAM,KAAK,UAAf,EAA2B;AAC5BT,kBAAAA,OAAO,CAACgB,GAAR,CAAY,UAAZ;AACAnC,kBAAAA,UAAU,CAACoC,mBAAX;AACH;;AAtByC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAlD;;AAAA;AAAA;AAAA;AAAA;AA2BH,GA5BD;;AA8BA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAE1BpC,IAAAA,IAAI,CAACqC,iBAAL,GAAyBf,gBAAzB,CAA0C,QAA1C;AAAA,0EAAoD,kBAAOC,GAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AAChDA,gBAAAA,GAAG,CAACe,cAAJ;AAEIC,gBAAAA,SAH4C,GAGhC5C,EAAE,CAAC6C,YAAH,EAHgC;AAIhDD,gBAAAA,SAAS,mCACFA,SADE;AAEL/B,kBAAAA,QAAQ,EAAE;AACND,oBAAAA,EAAE,EAAEuB,QAAQ,CAACS,SAAS,CAAC/B,QAAX;AADN;AAFL,kBAAT;AAMAU,gBAAAA,OAAO,CAACgB,GAAR,CAAYK,SAAZ,EAVgD,CAWhD;;AAXgD;;AAAA,sBAexCA,SAAS,CAACZ,MAAV,KAAqB,WAfmB;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAgBTjC,OAAO,CAAC+C,gBAAR,CAAyBF,SAAS,CAAC/B,QAAV,CAAmBD,EAA5C,EAAgDgC,SAAS,CAAC1B,WAA1D,EAAuE0B,SAAS,CAACvB,QAAjF,CAhBS;;AAAA;AAgBlCyB,gBAAAA,gBAhBkC;AAiBxCvB,gBAAAA,OAAO,CAACgB,GAAR,CAAYO,gBAAZ;;AAjBwC,oBAkBnCA,gBAlBmC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAmB9B/C,OAAO,CAACgD,KAAR,CAAcH,SAAd,CAnB8B;;AAAA;AAoBpCvC,gBAAAA,IAAI,CAAC2C,aAAL;AACA5C,gBAAAA,UAAU,CAAC6C,YAAX,CAAwB;AAAEC,kBAAAA,OAAO,EAAE,6CAAX;AAA0DC,kBAAAA,MAAM,EAAE;AAAlE,iBAAxB;AArBoC;AAAA;;AAAA;AAwBpC/C,gBAAAA,UAAU,CAAC6C,YAAX,CAAwB;AACpBG,kBAAAA,QAAQ,EAAE,WADU;AAEpBF,kBAAAA,OAAO,EAAE,+EAFW;AAGpBC,kBAAAA,MAAM,EAAE;AAHY,iBAAxB;;AAxBoC;AAAA;AAAA;;AAAA;AAAA,sBA+BnCP,SAAS,CAACZ,MAAV,KAAqB,QA/Bc;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAgCTjC,OAAO,CAAC+C,gBAAR,CAAyBF,SAAS,CAAC/B,QAAV,CAAmBD,EAA5C,EAAgDgC,SAAS,CAAC1B,WAA1D,EAAuE0B,SAAS,CAACvB,QAAjF,EAA2FuB,SAAS,CAAChC,EAArG,CAhCS;;AAAA;AAgClCkC,gBAAAA,iBAhCkC;AAiCxCvB,gBAAAA,OAAO,CAACgB,GAAR,CAAYO,iBAAZ;;AAjCwC,oBAkCnCA,iBAlCmC;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAmC9B/C,OAAO,CAACsD,UAAR,CAAmBT,SAAnB,CAnC8B;;AAAA;AAoCpCvC,gBAAAA,IAAI,CAAC2C,aAAL;AACA5C,gBAAAA,UAAU,CAAC6C,YAAX,CAAwB;AAAEC,kBAAAA,OAAO,EAAE,8CAAX;AAA2DC,kBAAAA,MAAM,EAAE;AAAnE,iBAAxB;AArCoC;AAAA;;AAAA;AAwCpC/C,gBAAAA,UAAU,CAAC6C,YAAX,CAAwB;AACpBG,kBAAAA,QAAQ,EAAE,WADU;AAEpBF,kBAAAA,OAAO,EAAE,+EAFW;AAGpBC,kBAAAA,MAAM,EAAE;AAHY,iBAAxB;;AAxCoC;AAAA;AAAA,uBAgDtC7C,kBAAkB,EAhDoB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmD5CiB,gBAAAA,OAAO,CAACC,KAAR;AACM0B,gBAAAA,OApDsC,GAoD3BN,SAAS,CAACZ,MAAV,KAAqB,WAAtB,GAAqC,8BAArC,GAAsE,mCApD1C;AAqDtCmB,gBAAAA,MArDsC,GAqD5BP,SAAS,CAACZ,MAAV,KAAqB,WAAtB,GAAqC,kBAArC,GAA0D,uBArD7B;AAsD5C5B,gBAAAA,UAAU,CAAC6C,YAAX,CAAwB;AAAEG,kBAAAA,QAAQ,EAAE,WAAZ;AAAyBF,kBAAAA,OAAO,EAAEA,OAAlC;AAA2CC,kBAAAA,MAAM,EAAEA;AAAnD,iBAAxB;;AAtD4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAApD;;AAAA;AAAA;AAAA;AAAA;AA4DH,GA9DD;;AAgEA,MAAMG,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1BlD,IAAAA,UAAU,CAACmD,gBAAX,GAA8B5B,gBAA9B,CAA+C,QAA/C;AAAA,0EAAyD,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AACrDA,gBAAAA,GAAG,CAACe,cAAJ,GADqD,CAChC;;AADgC;AAAA;AAAA,uBAG3C5C,OAAO,CAACyD,QAAR,CAAiBrB,QAAQ,CAAChC,gBAAgB,CAACS,EAAlB,CAAzB,CAH2C;;AAAA;AAIjDR,gBAAAA,UAAU,CAACqD,mBAAX;AACArD,gBAAAA,UAAU,CAAC6C,YAAX,CAAwB;AAAEC,kBAAAA,OAAO,EAAE,+CAAX;AAA4DC,kBAAAA,MAAM,EAAE;AAApE,iBAAxB;AALiD;AAAA,uBAM3C7C,kBAAkB,EANyB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASjDiB,gBAAAA,OAAO,CAACC,KAAR;AACApB,gBAAAA,UAAU,CAAC6C,YAAX,CAAwB;AAAEG,kBAAAA,QAAQ,EAAE,WAAZ;AAAyBF,kBAAAA,OAAO,EAAE,iCAAlC;AAAqEC,kBAAAA,MAAM,EAAE;AAA7E,iBAAxB;;AAViD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzD;;AAAA;AAAA;AAAA;AAAA;AAcH,GAfD;;AAiBA,MAAMO,iBAAiB,GAAG,SAApBA,iBAAoB,GAAM;AAC5BrD,IAAAA,IAAI,CAACsD,cAAL,GAAsBhC,gBAAtB,CAAuC,QAAvC;AAAA,0EAAiD,kBAAOC,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7CA,gBAAAA,GAAG,CAACe,cAAJ,GAD6C,CACxB;;AACfpC,gBAAAA,OAFuC,GAE7BP,EAAE,CAAC4D,UAAH,EAF6B;AAAA;AAAA,uBAGvCtD,kBAAkB,CAACC,OAAD,CAHqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAjD;;AAAA;AAAA;AAAA;AAAA;AAKH,GAND;;AASA,MAAM6B,eAAe;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACOnC,eAAe,CAACO,MAAhB,CAAuB,EAAvB,CADP;;AAAA;AACdqD,cAAAA,YADc;AAEdC,cAAAA,WAFc,GAEA;AAChBC,gBAAAA,KAAK,EAAEF;AADS,eAFA;AAKpBtC,cAAAA,OAAO,CAACgB,GAAR,CAAYsB,YAAZ;AACAzD,cAAAA,UAAU,CAAC4D,eAAX,CAA2BhE,EAAE,CAACiE,YAA9B,EAA4CH,WAA5C,EAAyD9D,EAAE,CAACkE,YAA5D;;AANoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAf9B,eAAe;AAAA;AAAA;AAAA,KAArB;;AASA,MAAM+B,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC1B9D,IAAAA,IAAI,CAAC+D,WAAL,GAAmBzC,gBAAnB,CAAoC,OAApC,uEAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACnCS,eAAe,EADoB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA7C;AAGH,GAJD;;AAMA,MAAMiC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAClBhE,IAAAA,IAAI,CAACiE,iBAAL,CAAuB,UAAvB;AACAhE,IAAAA,kBAAkB;AAClBD,IAAAA,IAAI,CAACkE,iBAAL;AACA9C,IAAAA,cAAc;AACdgB,IAAAA,eAAe;AACfa,IAAAA,eAAe;AACfI,IAAAA,iBAAiB;AACjBS,IAAAA,eAAe;AAClB,GATD;;AAYA,SAAO;AACHE,IAAAA,OAAO,EAAPA;AADG,GAAP;AAGH,CA7KD","sourcesContent":["\r\nconst ProductoController = (service, ui, productoService) => {\r\n    let lstPromociones = [];\r\n    let promSeleccionado = {};\r\n    const { Mant } = AthenasNet;\r\n\r\n    const muestraPromociones = async (filtros = {}) => {\r\n        try {\r\n            lstPromociones = await service.listar(filtros);\r\n            ui.generarTabla(lstPromociones.map(p => ({\r\n                Id: p.Id,\r\n                Producto: p.Producto.Descripcion,\r\n                Tipo: (p.Tipo === 0) ? 'Fijo' : 'Porcentual',\r\n                Valor: (p.Tipo === 0) ? `S/. ${p.Valor.toFixed(2)}` : `% ${p.Valor.toFixed(2)}`,\r\n                FechaInicio: AthenasNet.formatFecha(p.FFechaInicio),\r\n                FechaFin: AthenasNet.formatFecha(p.FFechaFin)\r\n            })));\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n\r\n    const manejaEvtTabla = () => {\r\n        Mant.getTblMantenedor().addEventListener('click', async (evt) => {\r\n\r\n            if (evt.target.dataset.id) {\r\n                const { id, accion } = evt.target.dataset;\r\n\r\n                promSeleccionado = lstPromociones.find(c => c.Id === parseInt(id));\r\n                promSeleccionado.accion = accion;\r\n\r\n                if (accion === 'editar') {\r\n                    await muestraPoductos();\r\n                    Mant.setFormMantenedor(\r\n                        {\r\n                            ...promSeleccionado,\r\n                            Valor: parseFloat(promSeleccionado.Valor).toFixed(2),\r\n                            Producto: promSeleccionado.Producto.Id,\r\n                            FechaFin: promSeleccionado.FFechaFin,\r\n                            FechaInicio: promSeleccionado.FFechaInicio\r\n                        }, ['Activo', 'FFechaInicio', 'FFechaFin']);\r\n                }\r\n                else if (accion === 'eliminar') {\r\n                    console.log('eliminar')\r\n                    AthenasNet.mostrarConfirmacion();\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    const manejaEnvioProm = () => {\r\n\r\n        Mant.getFormMantenedor().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();\r\n\r\n            let promocion = ui.getPromocion();\r\n            promocion = {\r\n                ...promocion,\r\n                Producto: {\r\n                    Id: parseInt(promocion.Producto)\r\n                }\r\n            }\r\n            console.log(promocion);\r\n            //validacion de promocion existente\r\n            \r\n\r\n            try {\r\n                if (promocion.accion === 'registrar') {\r\n                    const tienePromociones = await service.tienePromociones(promocion.Producto.Id, promocion.FechaInicio, promocion.FechaFin);\r\n                    console.log(tienePromociones);\r\n                    if (!tienePromociones) {\r\n                        await service.crear(promocion);\r\n                        Mant.cerrarModMant();\r\n                        AthenasNet.muestraToast({ mensaje: 'La promoción se registró satisfactoriamente', titulo: 'Registro exitoso' })\r\n                    }\r\n                    else {\r\n                        AthenasNet.muestraToast({\r\n                            cssClass: 'bg-danger',\r\n                            mensaje: 'El producto seleccionado ya posee promociones para el rango de fechas elegido',\r\n                            titulo: 'Promociones existentes'\r\n                        })\r\n                    }\r\n                }\r\n                else if (promocion.accion === 'editar') {\r\n                    const tienePromociones = await service.tienePromociones(promocion.Producto.Id, promocion.FechaInicio, promocion.FechaFin, promocion.Id)\r\n                    console.log(tienePromociones);\r\n                    if (!tienePromociones) {\r\n                        await service.actualizar(promocion);\r\n                        Mant.cerrarModMant();\r\n                        AthenasNet.muestraToast({ mensaje: 'La promoción se actualizó satisfactoriamente', titulo: 'Actualización exitosa' })\r\n                    }\r\n                    else {\r\n                        AthenasNet.muestraToast({\r\n                            cssClass: 'bg-danger',\r\n                            mensaje: 'El producto seleccionado ya posee promociones para el rango de fechas elegido',\r\n                            titulo: 'Promociones existentes'\r\n                        })\r\n                    }\r\n                    \r\n                }\r\n                await muestraPromociones();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                const mensaje = (promocion.accion === 'registrar') ? 'Hubo un error en el registro' : 'Hubo un error en la actualización';\r\n                const titulo = (promocion.accion === 'registrar') ? 'Registro erróneo' : 'Actualización errónea';\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: mensaje, titulo: titulo })\r\n            }\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const manejaEnvioConf = () => {\r\n        AthenasNet.getFormConfirmar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            try {\r\n                await service.eliminar(parseInt(promSeleccionado.Id));\r\n                AthenasNet.ocultarConfirmacion();\r\n                AthenasNet.muestraToast({ mensaje: 'La promoción fue eliminada satisfactoriamente', titulo: 'Eliminación exitosa' })\r\n                await muestraPromociones();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: 'Hubo un error en la eliminación', titulo: 'Eliminación errónea' })\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    const manejaEnvioFiltro = () => {\r\n        Mant.getFormFiltrar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            const filtros = ui.getFiltros();\r\n            await muestraPromociones(filtros);\r\n        })\r\n    }\r\n\r\n\r\n    const muestraPoductos = async () => {\r\n        const lstProductos = await productoService.listar({});\r\n        const tempCatData = {\r\n            filas: lstProductos\r\n        }\r\n        console.log(lstProductos);\r\n        AthenasNet.compilaTemplate(ui.ID_TEMP_PROD, tempCatData, ui.SEL_CBO_PROD);\r\n    }\r\n\r\n    const manejaAbreModal = () => {\r\n        Mant.getBtnNuevo().addEventListener('click', async () => {\r\n            await muestraPoductos();\r\n        })\r\n    }\r\n\r\n    const iniciar = () => {\r\n        Mant.configuraTamModal('modal-lg');\r\n        muestraPromociones();\r\n        Mant.evtMostrarModMant();\r\n        manejaEvtTabla();\r\n        manejaEnvioProm();\r\n        manejaEnvioConf();\r\n        manejaEnvioFiltro();\r\n        manejaAbreModal();\r\n    }\r\n\r\n\r\n    return {\r\n        iniciar\r\n    }\r\n}\r\n"],"file":"promocionController.js"}