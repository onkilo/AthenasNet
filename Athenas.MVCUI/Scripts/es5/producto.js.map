{"version":3,"sources":["../es6/producto.js"],"names":["ProductoService","crear","producto","AthenasNet","llamadaApi","type","data","JSON","stringify","url","respuesta","actualizar","listar","filtros","filtrosDefecto","Descripcion","Data","eliminar","id","Id","buscar","ProductoUI","getFiltros","arrFiltros","Mant","generarTabla","lstProductos","filas","edita","elimina","iniFormato","compilaTemplate","ID_TEMP_TBL_BODY","SEL_TBL_BODY","$","SEL_TBL_MANT","DataTable","getProducto","getEntidad","leerArchivo","archivo","Promise","resolve","reject","lector","FileReader","onload","e","target","result","onerror","err","readAsDataURL","getImgTag","document","getElementById","getImagenInput","querySelector","ProductoController","service","ui","prodSeleccionado","muestraProductos","map","p","PrecioCompra","PrecioVenta","StockActual","StockMin","Categoria","console","error","manejaEvtTabla","getTblMantenedor","addEventListener","evt","dataset","accion","find","c","parseInt","setFormMantenedor","src","Imagen","log","mostrarConfirmacion","manejaEnvioProd","getFormMantenedor","preventDefault","cerrarModMant","muestraToast","mensaje","titulo","categoria","cssClass","manejaEnvioConf","getFormConfirmar","ocultarConfirmacion","manejaEnvioFiltro","getFormFiltrar","manejaSeleccionImagen","files","iniciar","cambiaTama√±oModal","evtMostrarModMant","window","controller"],"mappings":"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","sourcesContent":["\r\nconst ProductoService = () => {\r\n\r\n    const crear = async (producto) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(producto),\r\n            url: 'Producto/Crear'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const actualizar = async (producto) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(producto),\r\n            url: 'Producto/Actualizar'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const listar = async (filtros) => {\r\n\r\n        const filtrosDefecto = {\r\n            Descripcion: '',\r\n            ...filtros\r\n        }\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: filtrosDefecto,\r\n            url: 'Producto/Listar'\r\n        })\r\n\r\n        return respuesta.Data;\r\n    }\r\n\r\n    const eliminar = async (id) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Producto/Eliminar'\r\n        })\r\n        return respuesta\r\n    }\r\n\r\n    const buscar = async (id) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Producto/Obtener'\r\n        })\r\n        return respuesta;\r\n\r\n    }\r\n\r\n    return {\r\n        crear,\r\n        actualizar,\r\n        listar,\r\n        eliminar,\r\n        buscar\r\n    }\r\n}\r\n\r\nconst ProductoUI = () => {\r\n\r\n    const getFiltros = () => {\r\n        const arrFiltros = ['Descripcion'];\r\n\r\n        return AthenasNet.Mant.getFiltros(arrFiltros);\r\n\r\n    }\r\n\r\n    const generarTabla = (lstProductos) => {\r\n\r\n        const data = {\r\n            filas: lstProductos,\r\n            edita: true,\r\n            elimina: true,\r\n            iniFormato: 'PD'\r\n        }\r\n\r\n        AthenasNet.compilaTemplate(AthenasNet.ID_TEMP_TBL_BODY, data, AthenasNet.Mant.SEL_TBL_BODY);\r\n        $(AthenasNet.Mant.SEL_TBL_MANT).DataTable();\r\n    }\r\n\r\n    const getProducto = () => {\r\n        return AthenasNet.Mant.getEntidad([\r\n            'Descripcion',\r\n            'Id',\r\n            'accion',\r\n            'PrecioCompra',\r\n            'PrecioVenta',\r\n            'StockActual',\r\n            'StockMin',\r\n            'Categoria'\r\n        ]);\r\n    }\r\n\r\n    const leerArchivo = (archivo) => {\r\n        return new Promise((resolve, reject) => {\r\n            const lector = new FileReader();\r\n            lector.onload = (e) => {\r\n                resolve(e.target.result)\r\n            }\r\n            lector.onerror = (err) => {\r\n                reject(err);\r\n            }\r\n\r\n            lector.readAsDataURL(archivo);\r\n        });\r\n\r\n    }\r\n\r\n    const getImgTag = () => document.getElementById('imgTag');\r\n\r\n    const getImagenInput = () => document.querySelector('#modal-mantenedor #ImagenInput');\r\n\r\n    return {\r\n        getProducto,\r\n        generarTabla,\r\n        getFiltros,\r\n        leerArchivo,\r\n        getImgTag,\r\n        getImagenInput\r\n    }\r\n}\r\n\r\nconst ProductoController = (service, ui) => {\r\n    let lstProductos = [];\r\n    let prodSeleccionado = {};\r\n    const { Mant } = AthenasNet;\r\n\r\n    const muestraProductos = async (filtros = {}) => {\r\n        try {\r\n            lstProductos = await service.listar(filtros);\r\n            ui.generarTabla(lstProductos.map(p => ({\r\n                Id: p.Id,\r\n                Descripcion: p.Descripcion,\r\n                PrecioCompra: p.PrecioCompra,\r\n                PrecioVenta: p.PrecioVenta,\r\n                StockActual: p.StockActual,\r\n                StockMin: p.StockMin,\r\n                Categoria: p.Categoria.Descripcion\r\n            })));\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    const manejaEvtTabla = () => {\r\n        Mant.getTblMantenedor().addEventListener('click', (evt) => {\r\n\r\n            if (evt.target.dataset.id) {\r\n                const { id, accion } = evt.target.dataset;\r\n\r\n                prodSeleccionado = lstProductos.find(c => c.Id === parseInt(id));\r\n                prodSeleccionado.accion = accion;\r\n\r\n                if (accion === 'editar') {\r\n                    Mant.setFormMantenedor({ ...prodSeleccionado, Categoria: prodSeleccionado.Categoria.Id }, ['Imagen', 'Base64Imagen']);\r\n                    ui.getImgTag().src = prodSeleccionado.Imagen;\r\n                }\r\n                else if (accion === 'eliminar') {\r\n                    console.log('eliminar')\r\n                    AthenasNet.mostrarConfirmacion();\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    const manejaEnvioProd = () => {\r\n\r\n        Mant.getFormMantenedor().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();\r\n\r\n            let producto = ui.getProducto();\r\n            //producto.Imagen = ui.getImgTag().src;\r\n            producto = {\r\n                ...producto,\r\n                Categoria: {\r\n                    Id: producto.Id\r\n                }\r\n            }\r\n            console.log(producto);\r\n            try {\r\n                if (producto.accion === 'registrar') {\r\n                    await service.crear(producto);\r\n                    Mant.cerrarModMant();\r\n                    AthenasNet.muestraToast({ mensaje: 'El producto se registr√≥ satisfactoriamente', titulo: 'Registro exitoso' })\r\n                }\r\n                else if (producto.accion === 'editar') {\r\n                    await service.actualizar(producto);\r\n                    Mant.cerrarModMant();\r\n                    AthenasNet.muestraToast({ mensaje: 'El producto se actualiz√≥ satisfactoriamente', titulo: 'Actualizaci√≥n exitosa' })\r\n                }\r\n                await muestraProductos();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                const mensaje = (categoria.accion === 'registrar') ? 'Hubo un error en el registro' : 'Hubo un error en la actualizaci√≥n';\r\n                const titulo = (categoria.accion === 'registrar') ? 'Registro err√≥neo' : 'Actualizaci√≥n err√≥nea';\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: mensaje, titulo: titulo })\r\n            }\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const manejaEnvioConf = () => {\r\n        AthenasNet.getFormConfirmar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            try {\r\n                await service.eliminar(parseInt(prodSeleccionado.Id));\r\n                AthenasNet.ocultarConfirmacion();\r\n                AthenasNet.muestraToast({ mensaje: 'El producto fue eliminado satisfactoriamente', titulo: 'Eliminaci√≥n exitosa' })\r\n                await muestraProductos();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: 'Hubo un error en la eliminaci√≥n', titulo: 'Eliminaci√≥n err√≥nea' })\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    const manejaEnvioFiltro = () => {\r\n        Mant.getFormFiltrar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            const filtros = ui.getFiltros();\r\n            await muestraProductos(filtros);\r\n        })\r\n    }\r\n\r\n    const manejaSeleccionImagen = () => {\r\n        ui.getImagenInput().addEventListener('input', async (e) => {\r\n            const archivo = e.target.files[0];\r\n            const url = await ui.leerArchivo(archivo);\r\n\r\n            ui.getImgTag().src = url;\r\n\r\n        })\r\n    }\r\n\r\n    const iniciar = () => {\r\n        Mant.cambiaTama√±oModal('modal-lg');\r\n        muestraProductos();\r\n        Mant.evtMostrarModMant();\r\n        manejaEvtTabla();\r\n        manejaEnvioProd();\r\n        manejaEnvioConf();\r\n        manejaEnvioFiltro();\r\n        manejaSeleccionImagen();\r\n    }\r\n\r\n\r\n    return {\r\n        iniciar\r\n    }\r\n}\r\n\r\n\r\n\r\nwindow.addEventListener('load', () => {\r\n\r\n    const service = ProductoService();\r\n\r\n    const ui = ProductoUI();\r\n\r\n    const controller = ProductoController(service, ui);\r\n\r\n    controller.iniciar();\r\n\r\n})"],"file":"producto.js"}