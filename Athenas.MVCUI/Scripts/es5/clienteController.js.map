{"version":3,"sources":["../es6/cliente/clienteController.js"],"names":["ClienteController","service","ui","lstClientes","cliSeleccionado","AthenasNet","Mant","muestraClientes","filtros","listarCliente","generarTabla","map","c","Id","Nombre","Apellido","Telefono","Dni","Sexo","console","error","manejaEvtTabla","getTblMantenedor","addEventListener","evt","target","dataset","id","accion","find","parseInt","setFormMantenedor","log","mostrarConfirmacion","manejaEnvioCli","getFormMantenedor","preventDefault","cliente","getCliente","crearCliente","cerrarModMant","muestraToast","mensaje","titulo","actualizarCliente","cssClass","manejaEnvioConf","getFormConfirmar","eliminarCliente","ocultarConfirmacion","manejaEnvioFiltro","getFormFiltrar","getFiltros","iniciar","evtMostrarModMant"],"mappings":"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","sourcesContent":["﻿const ClienteController = (service, ui) => {\r\n    let lstClientes = [];\r\n    let cliSeleccionado = {};\r\n    const { Mant } = AthenasNet;\r\n\r\n    const muestraClientes = async (filtros = {}) => {\r\n        try {\r\n            lstClientes = await service.listarCliente(filtros);\r\n            ui.generarTabla(lstClientes.map(c => ({\r\n                Id: c.Id,\r\n                Nombre: c.Nombre,\r\n                Apellido: c.Apellido,\r\n                Telefono: c.Telefono,\r\n                Dni: c.Dni,\r\n                Sexo: (c.Sexo === 'M') ? 'Masculino' : 'Femenino'\r\n            })));\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    const manejaEvtTabla = () => {\r\n        Mant.getTblMantenedor().addEventListener('click', (evt) => {\r\n\r\n            if (evt.target.dataset.id) {\r\n                const { id, accion } = evt.target.dataset;\r\n\r\n                cliSeleccionado = lstClientes.find(c => c.Id === parseInt(id));\r\n                cliSeleccionado.accion = accion;\r\n\r\n                if (accion === 'editar') {\r\n                    Mant.setFormMantenedor(cliSeleccionado, ['FechaCreacion','Activo']);\r\n                }\r\n                else if (accion === 'eliminar') {\r\n                    console.log('eliminar')\r\n                    AthenasNet.mostrarConfirmacion();\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    const manejaEnvioCli = () => {\r\n\r\n        Mant.getFormMantenedor().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();\r\n\r\n            const cliente = ui.getCliente();\r\n           \r\n            try {\r\n                if (cliente.accion === 'registrar') {\r\n                    await service.crearCliente(cliente);\r\n                    Mant.cerrarModMant();\r\n                    AthenasNet.muestraToast({ mensaje: 'El cliente se registró satisfactoriamente', titulo: 'Registro exitoso' })\r\n                }\r\n                else if (cliente.accion === 'editar') {\r\n                    await service.actualizarCliente(cliente);\r\n                    Mant.cerrarModMant();\r\n                    AthenasNet.muestraToast({ mensaje: 'El cliente se actualizó satisfactoriamente', titulo: 'Actualización exitosa' })\r\n                }\r\n                await muestraClientes();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                const mensaje = (cliente.accion === 'registrar') ? 'Hubo un error en el registro' : 'Hubo un error en la actualización';\r\n                const titulo = (cliente.accion === 'registrar') ? 'Registro erróneo' : 'Actualización errónea';\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: mensaje, titulo: titulo })\r\n            }\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n    const manejaEnvioConf = () => {\r\n        AthenasNet.getFormConfirmar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            try {\r\n                await service.eliminarCliente(parseInt(cliSeleccionado.Id));\r\n                AthenasNet.ocultarConfirmacion();\r\n                AthenasNet.muestraToast({ mensaje: 'El cliente fue eliminado satisfactoriamente', titulo: 'Eliminación exitosa' })\r\n                await muestraClientes();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: 'Hubo un error en la eliminación', titulo: 'Eliminación errónea' })\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    const manejaEnvioFiltro = () => {\r\n        Mant.getFormFiltrar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            const filtros = ui.getFiltros();\r\n            await muestraClientes(filtros);\r\n        })\r\n    }\r\n\r\n    const iniciar = () => {\r\n        muestraClientes();\r\n        Mant.evtMostrarModMant();\r\n        manejaEvtTabla();\r\n        manejaEnvioCli();\r\n        manejaEnvioConf();\r\n        manejaEnvioFiltro();\r\n    }\r\n\r\n\r\n    return {\r\n        iniciar\r\n    }\r\n}"],"file":"clienteController.js"}