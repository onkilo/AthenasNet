{"version":3,"sources":["../es6/proveedor/proveedorController.js"],"names":["ProveedorController","service","ui","lstProveedores","proveSeleccionado","AthenasNet","Mant","muestraProveedores","filtros","listarProveedor","generarTabla","map","c","Id","RzSocial","RUC","Representante","Email","Telefono","Direccion","console","error","manejaEvtTabla","getTblMantenedor","addEventListener","evt","target","dataset","id","accion","find","parseInt","setFormMantenedor","log","mostrarConfirmacion","manejaEnvioProve","getFormMantenedor","preventDefault","proveedor","getProveedor","crearProveedor","cerrarModMant","muestraToast","mensaje","titulo","actualizarProveedor","cssClass","manejaEnvioConf","getFormConfirmar","eliminarProveedor","ocultarConfirmacion","manejaEnvioFiltro","getFormFiltrar","getFiltros","iniciar","evtMostrarModMant"],"mappings":"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","sourcesContent":["﻿const ProveedorController = (service, ui) => {\r\n    let lstProveedores = [];\r\n    let proveSeleccionado = {};\r\n    const { Mant } = AthenasNet;\r\n\r\n    const muestraProveedores = async (filtros = {}) => {\r\n        try {\r\n            lstProveedores = await service.listarProveedor(filtros);\r\n            ui.generarTabla(lstProveedores.map(c => ({\r\n                Id: c.Id,\r\n                RzSocial: c.RzSocial,\r\n                RUC: c.RUC,\r\n                Representante: c.Representante,\r\n                Email: c.Email,\r\n                Telefono: c.Telefono,\r\n                Direccion: c.Direccion\r\n            })));\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n    }\r\n\r\n    const manejaEvtTabla = () => {\r\n        Mant.getTblMantenedor().addEventListener('click', (evt) => {\r\n\r\n            if (evt.target.dataset.id) {\r\n                const { id, accion } = evt.target.dataset;\r\n\r\n                proveSeleccionado = lstProveedores.find(c => c.Id === parseInt(id));\r\n                proveSeleccionado.accion = accion;\r\n\r\n                if (accion === 'editar') {\r\n                    Mant.setFormMantenedor(proveSeleccionado, ['Activo']);\r\n                }\r\n                else if (accion === 'eliminar') {\r\n                    console.log('eliminar')\r\n                    AthenasNet.mostrarConfirmacion();\r\n                }\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n\r\n    const manejaEnvioProve = () => {\r\n\r\n        Mant.getFormMantenedor().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();\r\n\r\n            const proveedor = ui.getProveedor();\r\n            try {\r\n                if (proveedor.accion === 'registrar') {\r\n                    await service.crearProveedor(proveedor);\r\n                    Mant.cerrarModMant();\r\n                    AthenasNet.muestraToast({ mensaje: 'El proveedor se registró satisfactoriamente', titulo: 'Registro exitoso' })\r\n                }\r\n                else if (proveedor.accion === 'editar') {\r\n                    await service.actualizarProveedor(proveedor);\r\n                    Mant.cerrarModMant();\r\n                    AthenasNet.muestraToast({ mensaje: 'El proveedor se actualizó satisfactoriamente', titulo: 'Actualización exitosa' })\r\n                }\r\n                await muestraProveedores();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                const mensaje = (proveedor.accion === 'registrar') ? 'Hubo un error en el registro' : 'Hubo un error en la actualización';\r\n                const titulo = (proveedor.accion === 'registrar') ? 'Registro erróneo' : 'Actualización errónea';\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: mensaje, titulo: titulo })\r\n            }\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n    const manejaEnvioConf = () => {\r\n        AthenasNet.getFormConfirmar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            try {\r\n                await service.eliminarProveedor(parseInt(proveSeleccionado.Id));\r\n                AthenasNet.ocultarConfirmacion();\r\n                AthenasNet.muestraToast({ mensaje: 'El proveedor fue eliminado satisfactoriamente', titulo: 'Eliminación exitosa' })\r\n                await muestraProveedores();\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n                AthenasNet.muestraToast({ cssClass: 'bg-danger', mensaje: 'Hubo un error en la eliminación', titulo: 'Eliminación errónea' })\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    const manejaEnvioFiltro = () => {\r\n        Mant.getFormFiltrar().addEventListener('submit', async (evt) => {\r\n            evt.preventDefault();//evitar la accion del evento\r\n            const filtros = ui.getFiltros();\r\n            await muestraProveedores(filtros);\r\n        })\r\n    }\r\n\r\n    const iniciar = () => {\r\n        muestraProveedores();\r\n        Mant.evtMostrarModMant();\r\n        manejaEvtTabla();\r\n        manejaEnvioProve();\r\n        manejaEnvioConf();\r\n        manejaEnvioFiltro();\r\n    }\r\n\r\n\r\n    return {\r\n        iniciar\r\n    }\r\n}"],"file":"proveedorController.js"}