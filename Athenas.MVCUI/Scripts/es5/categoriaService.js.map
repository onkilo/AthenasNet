{"version":3,"sources":["../es6/categoria/categoriaService.js"],"names":["CategoriaService","crearCategoria","categoria","AthenasNet","llamadaApi","type","data","JSON","stringify","url","respuesta","actualizarCategoria","listarCategoria","filtros","filtrosDefecto","Descripcion","Data","eliminarCategoria","id","Id","buscarCategoria"],"mappings":";;;;;;;;;;;;AACA,IAAMA,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AAE3B,MAAMC,cAAc;AAAA,uEAAG,iBAAOC,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACKC,UAAU,CAACC,UAAX,CAAsB;AAC1CC,gBAAAA,IAAI,EAAE,MADoC;AAE1CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,SAAf,CAFoC;AAG1CO,gBAAAA,GAAG,EAAE;AAHqC,eAAtB,CADL;;AAAA;AACbC,cAAAA,SADa;AAAA,+CAOZA,SAPY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAdT,cAAc;AAAA;AAAA;AAAA,KAApB;;AAUA,MAAMU,mBAAmB;AAAA,wEAAG,kBAAOT,SAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEAC,UAAU,CAACC,UAAX,CAAsB;AAC1CC,gBAAAA,IAAI,EAAE,MADoC;AAE1CC,gBAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,SAAf,CAFoC;AAG1CO,gBAAAA,GAAG,EAAE;AAHqC,eAAtB,CAFA;;AAAA;AAElBC,cAAAA,SAFkB;AAAA,gDAQjBA,SARiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAnBC,mBAAmB;AAAA;AAAA;AAAA,KAAzB;;AAWA,MAAMC,eAAe;AAAA,wEAAG,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAEdC,cAAAA,cAFc;AAGhBC,gBAAAA,WAAW,EAAE;AAHG,iBAIbF,OAJa;AAAA;AAAA,qBAOIV,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAEQ,cADoC;AAE1CL,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CAPJ;;AAAA;AAOdC,cAAAA,SAPc;AAAA,gDAYbA,SAAS,CAACM,IAZG;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfJ,eAAe;AAAA;AAAA;AAAA,KAArB;;AAeA,MAAMK,iBAAiB;AAAA,wEAAG,kBAAOC,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEEf,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAE;AAAEa,kBAAAA,EAAE,EAAED;AAAN,iBADoC;AAE1CT,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CAFF;;AAAA;AAEhBC,cAAAA,SAFgB;AAAA,gDAMfA,SANe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBO,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AASA,MAAMG,eAAe;AAAA,wEAAG,kBAAOF,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACIf,UAAU,CAACC,UAAX,CAAsB;AAC1CE,gBAAAA,IAAI,EAAE;AAAEa,kBAAAA,EAAE,EAAED;AAAN,iBADoC;AAE1CT,gBAAAA,GAAG,EAAE;AAFqC,eAAtB,CADJ;;AAAA;AACdC,cAAAA,SADc;AAAA,gDAKbA,SALa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAfU,eAAe;AAAA;AAAA;AAAA,KAArB;;AASA,SAAO;AACHnB,IAAAA,cAAc,EAAdA,cADG;AAEHU,IAAAA,mBAAmB,EAAnBA,mBAFG;AAGHC,IAAAA,eAAe,EAAfA,eAHG;AAIHK,IAAAA,iBAAiB,EAAjBA,iBAJG;AAKHG,IAAAA,eAAe,EAAfA;AALG,GAAP;AAOH,CA/DD","sourcesContent":["\r\nconst CategoriaService = () => {\r\n\r\n    const crearCategoria = async (categoria) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Crear'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const actualizarCategoria = async (categoria) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(categoria),\r\n            url: 'Categoria/Actualizar'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const listarCategoria = async (filtros) => {\r\n\r\n        const filtrosDefecto = {\r\n            Descripcion: '',\r\n            ...filtros\r\n        }\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: filtrosDefecto,\r\n            url: 'Categoria/Listar'\r\n        })\r\n\r\n        return respuesta.Data;\r\n    }\r\n\r\n    const eliminarCategoria = async (id) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Eliminar'\r\n        })\r\n        return respuesta\r\n    }\r\n\r\n    const buscarCategoria = async (id) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Categoria/Obtener'\r\n        })\r\n        return respuesta;\r\n\r\n    }\r\n\r\n    return {\r\n        crearCategoria,\r\n        actualizarCategoria,\r\n        listarCategoria,\r\n        eliminarCategoria,\r\n        buscarCategoria\r\n    }\r\n}"],"file":"categoriaService.js"}