{"version":3,"sources":["../es6/pedido/pedidoService.js"],"names":["PedidoService","crear","pedido","AthenasNet","llamadaApi","type","data","JSON","stringify","url","respuesta","actualizar","listar","filtros","filtrosDefecto","Proveedor","Data","eliminar","id","Id","buscar","recibir"],"mappings":"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","sourcesContent":["\r\nconst PedidoService = () => {\r\n\r\n    const crear = async (pedido) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(pedido),\r\n            url: 'Pedido/Crear'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const actualizar = async (pedido) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: JSON.stringify(pedido),\r\n            url: 'Pedido/Actualizar'\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    const listar = async (filtros) => {\r\n\r\n        const filtrosDefecto = {\r\n            Proveedor: '',\r\n            ...filtros\r\n        }\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: filtrosDefecto,\r\n            url: 'Pedido/Listar'\r\n        })\r\n\r\n        return respuesta.Data;\r\n    }\r\n\r\n    const eliminar = async (id) => {\r\n\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Pedido/Eliminar'\r\n        })\r\n        return respuesta\r\n    }\r\n\r\n    const buscar = async (id) => {\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            data: { Id: id },\r\n            url: 'Pedido/Obtener'\r\n        })\r\n        return respuesta;\r\n    }\r\n\r\n    const recibir = async (id) => {\r\n        debugger\r\n        const respuesta = await AthenasNet.llamadaApi({\r\n            type: 'POST',\r\n            data: {},\r\n            url: `Pedido/FormRecibir/${id}`\r\n        })\r\n\r\n        return respuesta;\r\n    }\r\n\r\n    return {\r\n        crear,\r\n        actualizar,\r\n        listar,\r\n        eliminar,\r\n        buscar,\r\n        recibir\r\n    }\r\n}"],"file":"pedidoService.js"}